{"version":3,"sources":["images/arrow.svg","images/logo.svg","Header.tsx","Search.tsx","DataCardHandler.ts","GraphHandler.ts","EntityGraph.jsx","DataCards.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["module","exports","Header","style","paddingTop","textAlign","src","require","alt","width","Search","props","pageRedirect","state","redirect","to","targetID","handleSearch","bind","handleSearchKeyDown","getDescriptors","id","this","hasKey","entities","alternatives","ReactGA","event","category","action","currentInput","document","getElementById","value","split","currentInputName","trim","setState","which","keyCode","obj","key","Fragment","margin","placeholder","list","onKeyDown","fontSize","maxHeight","Object","values","map","entity","arrow","onClick","className","React","Component","getGender","checkNoRelations","relationships","MOTHERS","length","FATHERS","SIBLINGS","TWIN","SPOUSES","CHILDREN","checkNoMembers","members","getNameString","parameter","stringSoFar","s","getName","entityRow","possibleNames","i","undefined","getAllMemberLinks","g","setNode","label","target","height","shape","setEdge","class","getAllRelationshipLinks","depth","r","arrowhead","WIVES","HUSBANDS","child","p","otherParentIDs","j","k","edges","v","JSON","parse","EntityGraph","openInfoPage","showDisputePage","showUnusualPage","edgeType","handleClickedNode","handleClickedEdge","graphlib","Graph","directed","compound","multigraph","setGraph","name","setDefaultEdgeLabel","labelStyle","getGraph","svg","d3","nodeTree","inner","nodeTreeGroup","zoom","on","attr","transform","call","dagreD3","render","translate","graph","scale","selectAll","disputedEdgeSelected","that","d","edge","w","relationshipClicked","location","reload","identifier","keywords","disputedEntities","e","borderTop","color","float","textDecoration","passage","getPassageLink","startID","author","passages","Author","title","Title","start","Passage","end","endID","URN","URNsplit","rel","href","fontStyle","maxWidth","padding","marginBottom","marginTop","getDisputedInfo","ref","viewBox","border","DataCards","sub","super","type","validSearch","alternativeName","handleNameClicked","history","push","relationship","showPassage","console","log","focus","clear","fontWeight","textTransform","paddingRight","getPluralization","checkUnusualRelationship","Pluralize","singular","mother_parthenogenesis","father_parthenogenesis","autochthony","getChildParentGrouped","getOtherParentText","group","c","pID","indexOf","member","relation","parents","divineParents","params","queryString","search","slice","newState","display","getAlternativeNames","getAlternativePage","getCollectiveSubheading","keys","getDataPoints","getCollectiveMembers","App","subjectID","ID","initialize","pageview","backgroundColor","path","component","Boolean","window","hostname","match","ReactDOM","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.70c8319a.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/arrow.1cd80763.svg\";","module.exports = __webpack_public_path__ + \"static/media/logo.1740fffd.svg\";","import React from \"react\";\nimport \"./App.css\";\n\nconst Header: React.FC = () => {\n  return (\n    <div style={{ paddingTop: \"4rem\", textAlign: \"center\" }}>\n      <img\n        src={require(\"./images/logo.svg\")}\n        alt=\"Manto logo\"\n        style={{ width: \"20%\" }}\n      ></img>\n    </div>\n  );\n};\n\nexport default Header;\n","import React from \"react\";\nimport \"./App.css\";\nimport entities from \"./data/entities.json\";\nimport { Redirect } from \"react-router-dom\";\nimport arrow from \"./images/arrow.svg\";\nimport ReactGA from \"react-ga\";\n\ntype SearchProps = {};\ntype SearchState = {\n  redirect: boolean;\n  targetID: string;\n};\n\nclass Search extends React.Component<SearchProps, SearchState> {\n  constructor(props: any) {\n    super(props);\n    this.state = {\n      redirect: false,\n      targetID: \"\"\n    };\n    // this.onSearchSubmit = this.onSearchSubmit.bind(this);\n    this.handleSearch = this.handleSearch.bind(this);\n    this.handleSearchKeyDown = this.handleSearchKeyDown.bind(this);\n    this.getDescriptors = this.getDescriptors.bind(this);\n  }\n\n  getDescriptors(id: string) {\n    if (this.hasKey(entities, id)) {\n      let alternatives: string = \"\";\n      if (entities[id][\"Name (transliteration)\"] !== \"\") {\n        alternatives =\n          alternatives + \", \" + entities[id][\"Name (transliteration)\"];\n      }\n      if (entities[id][\"Name (Latinized)\"] !== \"\") {\n        alternatives = alternatives + \", \" + entities[id][\"Name (Latinized)\"];\n      }\n      if (entities[id][\"Name in Latin texts\"] !== \"\") {\n        alternatives =\n          alternatives + \", \" + entities[id][\"Name in Latin texts\"];\n      }\n      if (entities[id][\"Alternative names\"] !== \"\") {\n        alternatives = alternatives + \", \" + entities[id][\"Alternative names\"];\n      }\n      let inputText =\n        entities[id][\"Name (Smith & Trzaskoma)\"] +\n        alternatives +\n        \": \" +\n        entities[id][\"Identifying information\"];\n      return inputText;\n    }\n  }\n\n  pageRedirect = () => {\n    if (this.state.redirect) {\n      return <Redirect to={\"/datacards?id=\" + this.state.targetID} />;\n    }\n  };\n\n  handleSearch() {\n    ReactGA.event({\n      category: \"Search\",\n      action: \"User searched for an entity using the search bar\"\n    });\n    let currentInput = document.getElementById(\"input\") as HTMLInputElement;\n    if (currentInput.value !== \"\") {\n      //Search based on name and identifying information - super inefficient. TODO: fix this\n      for (let id in entities) {\n        if (this.hasKey(entities, id)) {\n          if (\n            entities[id][\"Identifying information\"] ===\n            currentInput.value.split(\": \")[1]\n          ) {\n            let currentInputName = currentInput.value\n              .split(\": \")[0]\n              .split(\",\")[0]\n              .trim();\n\n            if (\n              currentInputName === entities[id][\"Name (Smith & Trzaskoma)\"] ||\n              currentInputName === entities[id][\"Name (transliteration)\"] ||\n              currentInputName === entities[id][\"Name (Latinized)\"] ||\n              currentInputName === entities[id][\"Name in Latin texts\"] ||\n              currentInputName === entities[id][\"Alternative names\"]\n            ) {\n              this.setState({\n                redirect: true,\n                targetID: id\n              });\n            }\n          }\n        }\n      }\n    }\n  }\n\n  handleSearchKeyDown(event: any) {\n    if (event.which === 13 || event.keyCode === 13) {\n      this.handleSearch();\n    }\n  }\n\n  /* Addresses typescript indexing objects error */\n  hasKey<O>(obj: O, key: keyof any): key is keyof O {\n    return key in obj;\n  }\n\n  render() {\n    /* const entitiesArray = Object.values(entities).map(entity => {\n      return {\n        // what to show to the user\n        label: entity.ID + \": \" + this.getDescriptors(entity.ID),\n        // key to identify the item within the array\n        key: entity.ID\n      };\n    }); */\n    return (\n      <React.Fragment>\n        {/* <h3 style={{ textAlign: \"center\" }}>SEARCH</h3> */}\n        {this.pageRedirect()}\n        <div\n          style={{\n            margin: \"1rem 0 1rem 0\",\n            textAlign: \"center\"\n          }}\n        >\n          {/* <DataListInput\n          placeholder={\"Search by entity name...\"}\n          items={entitiesArray}\n          onSelect={this.pageRedirect}\n          match={this.matchCurrentInput}\n        /> */}\n          <input\n            // type=\"search\"\n            placeholder=\"Search by name\"\n            id=\"input\"\n            list=\"entities\"\n            onKeyDown={this.handleSearchKeyDown}\n            style={{ width: \"50%\", textAlign: \"center\", fontSize: \"1rem\" }}\n          ></input>\n          <datalist id=\"entities\" style={{ maxHeight: \"100px\" }}>\n            {Object.values(entities).map(entity => {\n              return (\n                <option value={this.getDescriptors(entity[\"ID\"])}></option>\n              );\n            })}\n          </datalist>\n          <div>\n            <img\n              alt=\"Submit search\"\n              src={arrow}\n              onClick={this.handleSearch}\n              className=\"search-arrow\"\n            ></img>\n          </div>\n        </div>\n      </React.Fragment>\n    );\n  }\n}\n\nexport default Search;\n","var ties = require(\"./data/ties.json\");\nvar entities = require(\"./data/entities.json\");\nvar relationships = require(\"./data/relationships.json\");\n\ntype passageInfo = {\n  start: string;\n  startID: string;\n  end: string;\n  endID: string;\n};\n\ntype entityInfo = {\n  target: string;\n  targetID: string;\n  passage: passageInfo[];\n  type: string;\n  autochthony?: boolean;\n  mother_parthenogenesis?: boolean;\n  father_parthenogenesis?: boolean;\n};\n\ntype childrenInfo = {\n  child: entityInfo[];\n  otherParentIDs: string[];\n  divineParentID?: string;\n};\n\nexport type relationshipInfo = {\n  MOTHERS: entityInfo[];\n  FATHERS: entityInfo[];\n  SIBLINGS: entityInfo[];\n  TWIN: entityInfo[];\n  SPOUSES: entityInfo[];\n  CHILDREN: childrenInfo[];\n};\n\ntype returningInfo = {\n  id: string;\n  relationships: relationshipInfo;\n  name: string;\n  members: { sub: any[]; super: any[] };\n  type: string;\n  validSearch: boolean;\n  alternativeName: { targetID: string; passage: passageInfo[] };\n};\n\nlet familyTies = [\n  /* Parent */\n  \"is father of\",\n  \"is mother of\",\n  \"is parent of\",\n  /* Child */\n  \"is child of\",\n  /* Sibling */\n  \"is sibling of\",\n  \"is twin of\",\n  \"is older than\",\n  /* Spouse */\n  \"is spouse of\",\n  \"marries\",\n  /* Ancestors - currently unused\n  \"is grandfather of\",\n  \"is grandmother of\",\n  \"is grandparent of\",\n  \"is grandson of\",\n  \"is granddaughter of\",\n  \"is grandchild of\",\n  */\n\n  /* Member of collective */\n  \"is part of\",\n  \"is member of\",\n\n  /* Unusual relationships */\n  \"is mother by parthenogenesis of\",\n  \"is father by parthenogenesis of\",\n  \"is born by autochthony [in/on/at]\"\n];\n\n/******************************************************************************************/\n/* Returns the data card geneology information, interfaces with DataCards.tsx                \n/******************************************************************************************/\nexport const updateComponent = (id: string) => {\n  let connections = getAllConnections(id);\n  if (\n    connections.length > 0 &&\n    connections[0].verb === \"is alternative name for\"\n  ) {\n    let empty: relationshipInfo = {\n      MOTHERS: [],\n      FATHERS: [],\n      SIBLINGS: [],\n      TWIN: [],\n      SPOUSES: [],\n      CHILDREN: []\n    };\n    let altNameConnection: returningInfo = {\n      id: id,\n      relationships: empty,\n      name: getName(entities[id]),\n      members: { sub: [], super: [] },\n      type: entities[id] ? entities[id][\"Type of entity\"] : \"\",\n      validSearch: true,\n      alternativeName: {\n        targetID: connections[0].targetID,\n        passage: connections[0].passage\n      }\n    };\n    return altNameConnection;\n  } else {\n    return sortConnectionsIntoRelationships(id, connections);\n  }\n};\n\n/******************************************************************************************/\n/* Find all relationships                                                                 */\n/* -------------------------------------------------------------------------------------- */\n/* This function changes all ties (X <verb> Y, Y <verb> X, Z <verb> Y X) to Y <verb> X. */\n/******************************************************************************************/\nconst getAllConnections = (id: string) => {\n  var connections: {\n    target: string;\n    targetID: string;\n    verb: string;\n    passage: passageInfo[];\n  }[] = [];\n\n  Object.values(ties).forEach(function(tieRow) {\n    // TODO: Fix this temporary solution for entities not existing in entities.csv\n    if (typeof tieRow !== \"object\" || tieRow === null) {\n    } else {\n      // The first if statement is to remove \"object is of type unknown\" error\n\n      if (entities[tieRow[\"Subject ID\"]]) {\n        //check if the entity is just an \"alternative name for\"\n        //if so, ignore all geneological data gathered so far and just return connections = [{target: \"\", targetID: \"\", verb: \"is alternative name for\", passage:[]}]\n\n        if (\n          tieRow[\"Subject ID\"] === id &&\n          tieRow[\"Verb\"] === \"is alternative name for\"\n        ) {\n          let passageInfo: passageInfo[] = [\n            {\n              start: tieRow[\"Passage: start\"],\n              startID: tieRow[\"Passage: start ID\"],\n              end: tieRow[\"Passage: end\"] === \"\" ? \"\" : tieRow[\"Passage: end\"],\n              endID:\n                tieRow[\"Passage: end ID\"] === \"\"\n                  ? \"\"\n                  : tieRow[\"Passage: end ID\"]\n            }\n          ];\n          connections = [\n            {\n              target: \"\",\n              targetID: tieRow[\"Direct Object ID\"],\n              verb: \"is alternative name for\",\n              passage: passageInfo\n            }\n          ];\n          return connections;\n        }\n\n        /*********************************************************/\n        /* If you are the direct object X, e.g. (Y (verb) X)     */\n        /*********************************************************/\n        if (\n          tieRow[\"Direct Object ID\"] === id &&\n          familyTies.includes(tieRow[\"Verb\"])\n        ) {\n          let passageInfo: passageInfo[] = [\n            {\n              start: tieRow[\"Passage: start\"],\n              startID: tieRow[\"Passage: start ID\"],\n              end: tieRow[\"Passage: end\"] === \"\" ? \"\" : tieRow[\"Passage: end\"],\n              endID:\n                tieRow[\"Passage: end ID\"] === \"\"\n                  ? \"\"\n                  : tieRow[\"Passage: end ID\"]\n            }\n          ];\n\n          // TODO: Fix this temporary solution for gender data not existing for entity\n          if (getGender(tieRow[\"Subject ID\"]) && tieRow[\"Verb\"] === \"marries\") {\n            tieRow[\"Verb\"] = \"is spouse of\";\n          }\n\n          // Push connections to the list of connections\n          connections.push({\n            target: getName(entities[tieRow[\"Subject ID\"]]),\n            targetID: tieRow[\"Subject ID\"],\n            verb:\n              tieRow[\"Verb\"] === \"is part of\" ||\n              tieRow[\"Verb\"] === \"is member of\"\n                ? \"has members\"\n                : tieRow[\"Verb\"],\n            passage: passageInfo\n          });\n        }\n\n        /*********************************************************/\n        /* If you are the subject X, e.g. (X (verb) Y)           */\n        /*********************************************************/\n        if (\n          tieRow[\"Subject ID\"] === id &&\n          familyTies.includes(tieRow[\"Verb\"])\n        ) {\n          let passageInfo: passageInfo[] = [\n            {\n              start: tieRow[\"Passage: start\"],\n              startID: tieRow[\"Passage: start ID\"],\n              end: tieRow[\"Passage: end\"] === \"\" ? \"\" : tieRow[\"Passage: end\"],\n              endID: tieRow[\"Passage: end ID\"]\n            }\n          ];\n\n          // Push connections to the list of connections\n          if (tieRow[\"Verb\"] === \"is born by autochthony [in/on/at]\") {\n            connections.push({\n              target: \"\",\n              targetID: \"\",\n              verb: \"is born by autochthony [in/on/at]\",\n              passage: passageInfo\n            });\n          } else {\n            connections.push({\n              target: getName(entities[tieRow[\"Direct Object ID\"]]),\n              targetID: tieRow[\"Direct Object ID\"],\n              verb:\n                tieRow[\"Verb\"] === \"is part of\" ||\n                tieRow[\"Verb\"] === \"is member of\"\n                  ? \"is member of\"\n                  : reversedVerb(tieRow[\"Verb\"], tieRow[\"Direct Object ID\"]),\n              passage: passageInfo\n            });\n          }\n        }\n\n        /***********************************************************************/\n        /* For \"Gives in marriage:\" - parent gives child in marriage to person */\n        /*************************************************************************/\n\n        // If you are the indirect object X, e.g. (Z (verb) Y X)\n        if (\n          tieRow[\"Indirect Object (to/for) ID\"] &&\n          tieRow[\"Indirect Object (to/for) ID\"] === id &&\n          tieRow[\"Verb\"] === \"gives in marriage [dir. obj.] [ind. obj.]\"\n        ) {\n          let passageInfo: passageInfo[] = [\n            {\n              start: tieRow[\"Passage: start\"],\n              startID: tieRow[\"Passage: start ID\"],\n              end: tieRow[\"Passage: end\"] === \"\" ? \"\" : tieRow[\"Passage: end\"],\n              endID: tieRow[\"Passage: end ID\"]\n            }\n          ];\n          connections.push({\n            target: getName(entities[tieRow[\"Direct Object ID\"]]),\n            targetID: tieRow[\"Direct Object ID\"],\n            verb: \"is spouse of\",\n            passage: passageInfo\n          });\n        }\n\n        // If you are the direct object X, e.g. (Z (verb) X Y)\n        else if (\n          tieRow[\"Direct Object ID\"] &&\n          tieRow[\"Direct Object ID\"] === id &&\n          tieRow[\"Verb\"] === \"gives in marriage [dir. obj.] [ind. obj.]\"\n        ) {\n          let passageInfo: passageInfo[] = [\n            {\n              start: tieRow[\"Passage: start\"],\n              startID: tieRow[\"Passage: start ID\"],\n              end: tieRow[\"Passage: end\"] === \"\" ? \"\" : tieRow[\"Passage: end\"],\n              endID: tieRow[\"Passage: end ID\"]\n            }\n          ];\n          connections.push({\n            target: getName(entities[tieRow[\"Indirect Object (to/for) ID\"]]),\n            targetID: tieRow[\"Indirect Object (to/for) ID\"],\n            verb: \"is spouse of\",\n            passage: passageInfo\n          });\n        }\n      }\n    }\n  });\n\n  return connections;\n};\n\n/******************************************************************************************/\n/* Sort relationships                                                                     */\n/* -------------------------------------------------------------------------------------- */\n/* This function sorts all of the found connections into existing geneological categories */\n/******************************************************************************************/\nconst sortConnectionsIntoRelationships = (id: string, connections: any) => {\n  /* Preliminary info about the entity */\n  let name = getName(entities[id]);\n  let type = entities[id] ? entities[id][\"Type of entity\"] : \"\";\n  let members: { sub: any[]; super: any[] } = { sub: [], super: [] };\n  let relationships: relationshipInfo = {\n    MOTHERS: [],\n    FATHERS: [],\n    SIBLINGS: [],\n    TWIN: [],\n    SPOUSES: [],\n    CHILDREN: []\n  };\n\n  let childrenTemp: entityInfo[] = [];\n  connections.forEach(tie => {\n    // For each of the connections already found,\n    // build the associated entity object, and\n    // populate with existing information\n    let d: entityInfo = {\n      target: tie.target,\n      targetID: tie.targetID,\n      passage: tie.passage,\n      type:\n        tie.verb === \"is born by autochthony [in/on/at]\"\n          ? \"\"\n          : entities[tie.targetID]\n          ? entities[tie.targetID][\"Type of entity\"]\n          : \"\"\n    };\n\n    /* Categorising the connections, also checking for duplicates */\n\n    // X is your MOTHER\n    if (tie.verb === \"is mother of\") {\n      // If passage is a duplicate / already exists\n      // for this entity, or  in the list of connections\n      relationships.MOTHERS = checkAndRemoveDuplicates(\n        relationships.MOTHERS,\n        d\n      );\n    }\n\n    // X is your MOTHER by parthenogenesis\n    else if (tie.verb === \"is mother by parthenogenesis of\") {\n      let m: entityInfo = {\n        target: tie.target,\n        targetID: tie.targetID,\n        passage: tie.passage,\n        type: entities[tie.targetID]\n          ? entities[tie.targetID][\"Type of entity\"]\n          : \"\",\n        mother_parthenogenesis: true\n      };\n\n      relationships.MOTHERS = checkAndRemoveDuplicates(\n        relationships.MOTHERS,\n        m\n      );\n    }\n\n    // X is your FATHER\n    else if (tie.verb === \"is father of\") {\n      relationships.FATHERS = checkAndRemoveDuplicates(\n        relationships.FATHERS,\n        d\n      );\n    }\n\n    // X is your FATHER by parthenogenesis\n    else if (tie.verb === \"is father by parthenogenesis of\") {\n      let f: entityInfo = {\n        target: tie.target,\n        targetID: tie.targetID,\n        passage: tie.passage,\n        type: entities[tie.targetID]\n          ? entities[tie.targetID][\"Type of entity\"]\n          : \"\",\n        father_parthenogenesis: true\n      };\n      relationships.FATHERS = checkAndRemoveDuplicates(\n        relationships.FATHERS,\n        f\n      );\n    }\n\n    // X is your CHILD\n    else if (tie.verb === \"is child of\") {\n      childrenTemp = checkAndRemoveDuplicates(childrenTemp, d);\n    }\n\n    // X is your SIBLING\n    else if (tie.verb === \"is sibling of\" || tie.verb === \"is older than\") {\n      relationships.SIBLINGS = checkAndRemoveDuplicates(\n        relationships.SIBLINGS,\n        d\n      );\n    }\n\n    // X is your TWIN\n    else if (tie.verb === \"is twin of\") {\n      relationships.TWIN = checkAndRemoveDuplicates(relationships.TWIN, d);\n    }\n    // X is your WIFE / HUSBAND\n    else if (tie.verb === \"is spouse of\" || tie.verb === \"marries\") {\n      relationships.SPOUSES = checkAndRemoveDuplicates(\n        relationships.SPOUSES,\n        d\n      );\n    }\n    // X is a MEMBER of a collective but the main ID\n    else if (tie.verb === \"is member of\") {\n      members.super = checkAndRemoveDuplicates(members.super, d);\n    } else if (tie.verb === \"has members\") {\n      members.sub = checkAndRemoveDuplicates(members.sub, d);\n    }\n    // X is born by autochthony\n    else if (tie.verb === \"is born by autochthony [in/on/at]\") {\n      let a: entityInfo = {\n        target: \"\",\n        targetID: \"\",\n        passage: tie.passage,\n        type: entities[id] ? entities[id][\"Type of entity\"] : \"\",\n        autochthony: true\n      };\n      relationships.FATHERS = checkAndRemoveDuplicates(\n        relationships.FATHERS,\n        a\n      );\n    }\n  });\n\n  /* TODO: Check for any indirect siblings in the ties */\n  relationships.SIBLINGS = getIndirectSiblings(\n    id,\n    relationships.MOTHERS,\n    relationships.FATHERS,\n    relationships.SIBLINGS\n  );\n\n  /* Alphabetize the relationships */\n  relationships.MOTHERS = alphabetize(relationships.MOTHERS);\n  relationships.FATHERS = alphabetize(relationships.FATHERS);\n  relationships.SIBLINGS = alphabetize(relationships.SIBLINGS);\n  relationships.TWIN = alphabetize(relationships.TWIN);\n  relationships.SPOUSES = alphabetize(relationships.SPOUSES);\n  members.super = alphabetize(members.super);\n  members.sub = alphabetize(members.sub);\n\n  // Currently very inefficient, but finds the other parent of the child\n  relationships.CHILDREN = getOtherParents(id, childrenTemp);\n  // relationships.CHILDREN = alphabetizeChildren(relationships.CHILDREN);\n\n  /* Return alphabetized, complete list of relationships */\n  let connection: returningInfo = {\n    id: id,\n    relationships: relationships,\n    name: name,\n    members: members,\n    type: type,\n    validSearch: true,\n    alternativeName: { targetID: \"\", passage: [] }\n  };\n  return connection;\n};\n\n/******************************************************************************************/\n/* Check passage and entity duplicates                                                    */\n/* -------------------------------------------------------------------------------------- */\n/* This function removes duplicate ties (incl. after reversal) and duplicate passages   */\n/* for the same connected entity                                                          */\n/******************************************************************************************/\nconst checkAndRemoveDuplicates = (entities: any[], d: entityInfo) => {\n  let duplicate = false;\n  entities.forEach(e => {\n    if (e.targetID === d.targetID) {\n      duplicate = true;\n      let passageDuplicate = false;\n      e.passage.forEach(p => {\n        if (\n          p.startID === d.passage[0].startID &&\n          p.endID === d.passage[0].endID\n        ) {\n          passageDuplicate = true;\n        }\n      });\n      if (!passageDuplicate) {\n        e.passage.push(d.passage[0]);\n      }\n    }\n  });\n  if (!duplicate) {\n    entities.push(d);\n  }\n  return entities;\n};\n\nconst checkAndRemoveParentDuplicates = (\n  child: entityInfo, //child to add\n  parentsList: string[], //list of child's parents\n  parentsGrouped: childrenInfo[] //existing parents list to update\n) => {\n  // This function removes duplicates but also groups children by the \"other\" parent\n  // returns childrenInfo object: {child: <list of associated children>, otherParentIDs}\n\n  // If the same child appears under two different \"otherParent\"s, then dispute is expressed\n  // The child will be under {child: <list of children>, otherParents: <list of all parents + disputed>}\n  let parentDuplicate = false;\n  let childDuplicate = false;\n\n  for (let i = 0; i < parentsGrouped.length; i++) {\n    if (isEqual(parentsList, parentsGrouped[i])) {\n      // Is parent duplicate. Now check if child is already in list.\n      parentDuplicate = true;\n      for (let j = 0; j < parentsGrouped[i].child.length; j++) {\n        if (parentsGrouped[i].child[j].targetID === child.targetID) {\n          childDuplicate = true;\n        }\n      }\n      if (!childDuplicate) {\n        parentsGrouped[i].child.push(child);\n      }\n    }\n  }\n\n  if (!childDuplicate && !parentDuplicate) {\n    let newChild: childrenInfo = {\n      child: [child],\n      otherParentIDs: parentsList\n    };\n    parentsGrouped.push(newChild);\n  }\n\n  return parentsGrouped;\n};\n\n/******************************************************************************************/\n/* Alphabetize the list of names in each category                                         */\n/******************************************************************************************/\nconst alphabetize = (relation: any[]) => {\n  if (relation.length === 0) {\n    return [];\n  } else {\n    relation.sort(function(a, b) {\n      var relationA = a.target.toUpperCase();\n      var relationB = b.target.toUpperCase();\n      return relationA < relationB ? -1 : relationA > relationB ? 1 : 0;\n    });\n  }\n  return relation;\n};\n\nconst alphabetizeIDs = (relation: any[]) => {\n  if (relation.length === 0) {\n    return [];\n  } else {\n    relation.sort(function(a, b) {\n      var relationA = a.targetID;\n      var relationB = b.targetID;\n      return relationA < relationB ? -1 : relationA > relationB ? 1 : 0;\n    });\n  }\n  return relation;\n};\n\n/******************************************************************************************/\n/* Check if two arrays are equal                                                          */\n/******************************************************************************************/\nconst isEqual = (parentsList: any[], child: childrenInfo) => {\n  if (parentsList.length !== child.otherParentIDs.length) {\n    return false;\n  } else {\n    for (let i = 0; i < parentsList.length; i++) {\n      if (parentsList[i] !== child.otherParentIDs[i]) {\n        return false;\n      }\n    }\n    return true;\n  }\n};\n\n/******************************************************************************************/\n/* TODO: Fix this very VERY inefficient method of finding the other parent.               */\n/* Swap for shared NodegoatID                                                             */\n/******************************************************************************************/\nconst getOtherParents = (id: string, children: entityInfo[]) => {\n  let mainGender = getGender(id);\n  let parentsGrouped: childrenInfo[] = [];\n  children.forEach(c => {\n    if (relationships[c.targetID] !== undefined) {\n      var parentsList;\n      if (mainGender === \"Female\") {\n        parentsList = JSON.parse(relationships[c.targetID]).relationships\n          .FATHERS;\n      } else {\n        //temporary solution to undefined gender\n        parentsList = JSON.parse(relationships[c.targetID]).relationships\n          .MOTHERS;\n      }\n      // Convert list of entityInfo to a list of IDs\n      for (let i = 0; i < parentsList.length; i++) {\n        parentsList[i] = parentsList[i].targetID;\n      }\n      parentsList = alphabetizeIDs(parentsList);\n      parentsGrouped = checkAndRemoveParentDuplicates(\n        c,\n        parentsList,\n        parentsGrouped\n      );\n    }\n  });\n  return parentsGrouped;\n};\n\n/******************************************************************************************/\n/* Get the gender of the entity                                                           */\n/******************************************************************************************/\nexport const getGender = (id: string) => {\n  return entities[id] ? entities[id][\"Agent/Coll.: gender\"] : \"\";\n};\n\n/******************************************************************************************/\n/* Tie reversals                                                   */\n/* -------------------------------------------------------------------------------------- */\n/* This function flips the verb so that X can become the direct object,                   */\n/* without compromising the validity of the tie                                         */\n/*                                                                                        */\n/* e.g. X <is mother of> Y, where Y is <male>                                             */\n/* => returns verb <is son of>, to let X become the direct object (Y is son of X)         */\n/******************************************************************************************/\nconst reversedVerb = (verb: string, dirObject: string) => {\n  // TODO: Fix this temporary solution for gender data not existing for entity\n  // PARENT -> CHILD\n  if (verb === \"is parent of\") {\n    // Uses generic \"is child of\" since data cards do not show gender specificity for children\n    return \"is child of\";\n  }\n\n  // CHILD -> PARENT\n  else if (verb === \"is child of\") {\n    if (getGender(dirObject) === \"Female\") {\n      return \"is mother of\";\n    } else if (getGender(dirObject) === \"Male\") {\n      return \"is father of\";\n    } else {\n      // Placeholder since \"is parent of\" is not currently used in data cards\n      return \"\";\n    }\n  }\n\n  // TWIN -> TWIN\n  else if (verb === \"is twin of\") {\n    return \"is twin of\";\n  }\n\n  // SIBLING -> SIBLING\n  else if (verb === \"is sibling of\" || verb === \"is older than\") {\n    return \"is sibling of\";\n  }\n\n  // WIFE -> HUSBAND\n  // HUSBAND -> WIFE\n  // No cases of homosexual relationships in the mythology\n  else if (verb === \"is spouse of\" || verb === \"marries\") {\n    return \"is spouse of\";\n  } else if (verb === \"is member of\" || verb === \"is part of\") {\n    return \"\";\n  } else {\n    console.log(\n      \"Unsure of \" +\n        verb +\n        \" \" +\n        dirObject +\n        \" connection, or connection is not relevant for the datacards.\",\n      verb,\n      dirObject\n    );\n    return \"\";\n  }\n};\n\n/******************************************************************************************/\n/* Populate an array of siblings based on matching parents                                */\n/* -------------------------------------------------------------------------------------- */\n/* This function checks through the list of ties and pushes to the list of siblings:    */\n/*                                                                                        */\n/* e.g. X is <child> of A, X is <child> of B, Y is <child> of A, Y is <child> of B        */\n/******************************************************************************************/\nconst getIndirectSiblings = (\n  id: string,\n  mothers: any[],\n  fathers: any[],\n  siblings: any[]\n) => {\n  // CURRENTLY A VERY SLOW SOLUTION - OPTIMIZE IT LATER\n  // CHANGE TO POPULATING A DATABASE OF RELATIONS AND READING OFF THAT DATABASE\n  // RATHER THAN DYNAMICALLY GENERATING IT HERE (CHANGE TO O(N) NOT LEAVE AS O(N^3))\n  // ALTERNATIVELY: Use Nodegoat ID to determine those in the same datum ID, and then match those\n\n  let newsiblings: {} = {};\n  Object.values(ties).forEach(function(tieRow) {\n    if (typeof tieRow !== \"object\" || tieRow === null) {\n    } else {\n      let testsibling = {\n        motherMatch: false,\n        fatherMatch: false,\n        info: {}\n      };\n      let passageInfo: passageInfo[] = [\n        {\n          start: tieRow[\"Passage: start\"],\n          startID: tieRow[\"Passage: start ID\"],\n          end: tieRow[\"Passage: end\"] === \"\" ? \"\" : tieRow[\"Passage: end\"],\n          endID: tieRow[\"Passage: end ID\"]\n        }\n      ];\n      let testinfo: entityInfo = {\n        target: \"\",\n        targetID: \"\",\n        passage: passageInfo,\n        type: entities[id] ? entities[id][\"Type of entity\"] : \"\"\n      };\n      // Firstly, determine where Y is <child> of A,B\n      if (\n        tieRow[\"Verb\"] === \"is daughter of\" ||\n        tieRow[\"Verb\"] === \"is son of\" ||\n        tieRow[\"Verb\"] === \"is child of\"\n      ) {\n        mothers.forEach(m => {\n          if (m.targetID === tieRow[\"Direct Object ID\"]) {\n            testsibling.motherMatch = true;\n            testinfo.target = getName(entities[tieRow[\"Subject ID\"]]);\n            testinfo.targetID = tieRow[\"Subject ID\"];\n            testsibling.info = testinfo;\n            if (!(tieRow[\"Subject ID\"] in newsiblings)) {\n              newsiblings[tieRow[\"Subject ID\"]] = testsibling;\n            } else {\n              newsiblings[tieRow[\"Subject ID\"]].motherMatch = true;\n            }\n          }\n        });\n        fathers.forEach(f => {\n          if (f.targetID === tieRow[\"Direct Object ID\"]) {\n            testsibling.fatherMatch = true;\n            testinfo.target = getName(entities[tieRow[\"Subject ID\"]]);\n            testinfo.targetID = tieRow[\"Subject ID\"];\n            testsibling.info = testinfo;\n            if (!(tieRow[\"Subject ID\"] in newsiblings)) {\n              newsiblings[tieRow[\"Subject ID\"]] = testsibling;\n            } else {\n              newsiblings[tieRow[\"Subject ID\"]].fatherMatch = true;\n            }\n          }\n        });\n      }\n      // Then, determine where A is mother of Y, or if parent of Y where A is female\n      if (\n        tieRow[\"Verb\"] === \"is mother of\" ||\n        tieRow[\"Verb\"] === \"is divine mother of\" ||\n        (tieRow[\"Verb\"] === \"is parent of\" &&\n          entities[tieRow[\"Subject ID\"]] &&\n          entities[tieRow[\"Subject ID\"]][\"Agent/Coll.: gender\"] === \"Female\")\n      ) {\n        mothers.forEach(m => {\n          if (m.targetID === tieRow[\"Subject ID\"]) {\n            testsibling.motherMatch = true;\n            testinfo.target = getName(entities[tieRow[\"Direct Object ID\"]]);\n            testinfo.targetID = tieRow[\"Direct Object ID\"];\n            testsibling.info = testinfo;\n            if (!(tieRow[\"Direct Object ID\"] in newsiblings)) {\n              newsiblings[tieRow[\"Direct Object ID\"]] = testsibling;\n            } else {\n              newsiblings[tieRow[\"Direct Object ID\"]].motherMatch = true;\n            }\n          }\n        });\n      }\n      // Then, determine where A is father of Y, or if parent of Y where A is male\n      if (\n        tieRow[\"Verb\"] === \"is father of\" ||\n        tieRow[\"Verb\"] === \"is divine father of\" ||\n        (tieRow[\"Verb\"] === \"is parent of\" &&\n          entities[tieRow[\"Subject ID\"]] &&\n          entities[tieRow[\"Subject ID\"]][\"Agent/Coll.: gender\"] === \"Male\")\n      ) {\n        fathers.forEach(f => {\n          if (f.targetID === tieRow[\"Subject ID\"]) {\n            testsibling.fatherMatch = true;\n            testinfo.target = getName(entities[tieRow[\"Direct Object ID\"]]);\n            testinfo.targetID = tieRow[\"Direct Object ID\"];\n            testsibling.info = testinfo;\n            if (!(tieRow[\"Direct Object ID\"] in newsiblings)) {\n              newsiblings[tieRow[\"Direct Object ID\"]] = testsibling;\n            } else {\n              newsiblings[tieRow[\"Direct Object ID\"]].fatherMatch = true;\n            }\n          }\n        });\n      }\n    }\n  });\n  let keys: any[] = Object.keys(newsiblings);\n  keys.forEach(k => {\n    if (\n      !newsiblings[k].motherMatch ||\n      !newsiblings[k].fatherMatch ||\n      k === id\n    ) {\n      delete newsiblings[k];\n    } else {\n      siblings = checkAndRemoveDuplicates(siblings, newsiblings[k].info);\n    }\n  });\n  return siblings;\n};\n\n/******************************************************************************************/\n/* Check if no relations exist for this entity (used in DataCards.tsx)                    */\n/******************************************************************************************/\nexport const checkNoRelations = (relationships: any) => {\n  return (\n    relationships.MOTHERS.length === 0 &&\n    relationships.FATHERS.length === 0 &&\n    relationships.SIBLINGS.length === 0 &&\n    relationships.TWIN.length === 0 &&\n    relationships.SPOUSES.length === 0 &&\n    relationships.CHILDREN.length === 0\n  );\n};\n\nexport const checkNoMembers = (members: any) => {\n  return !members || members.length === 0;\n};\n\n/******************************************************************************************/\n/* Return all alternative names for entity (used in DataCards.tsx)                        */\n/******************************************************************************************/\nexport const getAlternativeNames = (id: string) => {\n  let alternatives: string = \"\";\n  alternatives += getNameString(\"Name (transliteration)\", alternatives, id);\n  alternatives += getNameString(\"Name (Latinized)\", alternatives, id);\n  alternatives += getNameString(\"Name in Latin texts\", alternatives, id);\n  alternatives += getNameString(\"Alternative names\", alternatives, id);\n\n  if (alternatives === \"\") {\n    return alternatives;\n  } else {\n    return \"(Also known as: \" + alternatives + \")\";\n  }\n};\n\nconst getNameString = (parameter: string, stringSoFar: string, id: string) => {\n  let s = \"\";\n  if (entities[id][parameter] !== \"\") {\n    if (stringSoFar === \"\") {\n      s = entities[id][parameter];\n    } else {\n      s = stringSoFar + \", \" + entities[id][parameter];\n    }\n  }\n  return s;\n};\n\n/******************************************************************************************/\n/* Get the entity's name                                                                  */\n/******************************************************************************************/\nexport const getName = (entityRow: any) => {\n  let possibleNames = [\n    \"Name (Smith & Trzaskoma)\",\n    \"Name (transliteration)\",\n    \"Name (Latinized)\",\n    \"Name in Latin texts\",\n    \"Alternative names\"\n  ];\n  if (entityRow) {\n    for (let i = 0; i < possibleNames.length; i++) {\n      if (\n        entityRow[possibleNames[i]] &&\n        entityRow[possibleNames[i]] !== \"\" &&\n        entityRow[possibleNames[i]] !== undefined\n      ) {\n        return entityRow[possibleNames[i]];\n      }\n      return \"\";\n    }\n  } else {\n    return \"\";\n  }\n};\n\n/******************************************************************************************/\n/* Get the entity type                                                                    */\n/******************************************************************************************/\nexport const getEntityType = (id: string) => {\n  if (entities[id]) {\n    if (entities[id][\"Type of entity\"] === \"Collective (Episodic)\") {\n      return \"Collective (Episodic)\";\n    } else if (entities[id][\"Type of entity\"] === \"Collective (misc.)\") {\n      return \"Collective (Miscellaneous)\";\n    } else if (entities[id][\"Type of entity\"] === \"Collective (genealogical)\") {\n      return \"Collective (Genealogical)\";\n    } else {\n      return \"\";\n    }\n  } else {\n    return \"\";\n  }\n};\n","import entities from \"./data/entities.json\";\nimport {\n  getName,\n  getGender,\n  checkNoMembers,\n  checkNoRelations\n} from \"./DataCardHandler\";\nimport \"./EntityGraph.scss\";\n\n/*\n\nexport type relationshipInfo = {\n  MOTHERS: entityInfo[];\n  FATHERS: entityInfo[];\n  SIBLINGS: entityInfo[];\n  WIVES: entityInfo[];\n  HUSBANDS: entityInfo[];\n  CHILDREN: entityInfo[];\n};\n\n*/\n\nexport const getGraph = (\n  depth: number,\n  id: string,\n  relationships: any,\n  members: any[]\n) => {\n  // ignores initial empty relationship graph generation\n  // Generate all connections in GraphLib form\n  var dagreD3 = require(\"dagre-d3\");\n\n  // Establish the graph and set the graph's name\n  let g = new dagreD3.graphlib.Graph({\n    directed: true,\n    compound: true,\n    multigraph: true\n  }).setGraph({\n    name: getName(entities[id]) + \" relationships\"\n  });\n  g.setDefaultEdgeLabel(function() {\n    return {};\n  });\n\n  // Set main node\n  g.setNode(id, {\n    label: getName(entities[id]),\n    labelStyle: \"font-size: 30px;\",\n    width: 288,\n    height: 200,\n    shape: \"ellipse\"\n  });\n\n  if (!checkNoRelations(relationships)) {\n    getAllRelationshipLinks(g, depth, id, relationships);\n  }\n  if (!checkNoMembers(members)) {\n    // We do not consider depth here due to type of graph produced\n    getAllMemberLinks(g, id, members);\n  }\n  /* TODO: How to address partners, e.g. fathers linked to mothers if have multiple fathers or multiple mothers */\n\n  /*\n    var svg = d3.select(\"svg\"),\n      inner = svg.select(\"g\");\n\n    // Create the renderer\n    let render = new dagreD3.render();\n    // Run the renderer and draw the final graph\n    render.run(inner, g);\n    */\n  return g;\n};\n\nconst getAllMemberLinks = (g: any, id: string, members: any[]) => {\n  for (let i = 0; i < members.length; i++) {\n    g.setNode(members[i].targetID, {\n      label: members[i].target,\n      width: 144,\n      height: 100,\n      shape: \"ellipse\"\n    });\n    g.setEdge(id, members[i].targetID, {\n      label: \"member\",\n      class: \"memberEdge\"\n    });\n  }\n};\n\nconst getAllRelationshipLinks = (\n  g: any,\n  depth: number,\n  id: string,\n  relationships: any\n) => {\n  // Makes the size of the nodes proportional to the depth\n  let width = 144 / depth;\n  let height = 100 / depth;\n\n  if (relationships.MOTHERS && relationships.MOTHERS.length !== 0) {\n    for (let i = 0; i < relationships.MOTHERS.length; i++) {\n      let r = relationships.MOTHERS[i];\n      g.setNode(r.targetID, {\n        label: r.target,\n        width: width,\n        height: height,\n        shape: \"ellipse\"\n      });\n      g.setEdge(r.targetID, id, {\n        label: \"mother\",\n        class: relationships.MOTHERS.length > 1 ? \"disputedEdge\" : \"normalEdge\",\n        id: relationships.MOTHERS.length > 1 ? \"disputed mother\" : \"mother\"\n      });\n      // g.setParent(id, r.targetID); //make compound subgraphs, r.targetID is parent of id\n    }\n  }\n\n  if (relationships.FATHERS && relationships.FATHERS.length !== 0) {\n    for (let i = 0; i < relationships.FATHERS.length; i++) {\n      let r = relationships.FATHERS[i];\n      g.setNode(r.targetID, {\n        label: r.target,\n        width: width,\n        height: height,\n        shape: \"ellipse\"\n      });\n      g.setEdge(r.targetID, id, {\n        label: \"father\",\n        class: relationships.FATHERS.length > 1 ? \"disputedEdge\" : \"normalEdge\",\n        id: relationships.FATHERS.length > 1 ? \"disputed father\" : \"father\"\n      });\n      // g.setParent(id, r.targetID); //make compound subgraphs, r.targetID is parent of id\n    }\n  }\n\n  if (\n    (relationships.SIBLINGS && relationships.SIBLINGS.length !== 0) ||\n    (relationships.TWIN && relationships.TWIN.length !== 0)\n  ) {\n    for (let i = 0; i < relationships.SIBLINGS.length; i++) {\n      let r = relationships.SIBLINGS[i];\n      g.setNode(r.targetID, {\n        label: r.target,\n        width: width,\n        height: height,\n        shape: \"ellipse\"\n      });\n      g.setEdge(id, r.targetID, {\n        label: \"sibling\",\n        arrowhead: \"undirected\"\n      });\n      if (relationships.MOTHERS[0]) {\n        g.setEdge(relationships.MOTHERS[0].targetID, r.targetID);\n      }\n      if (relationships.FATHERS[0]) {\n        g.setEdge(relationships.FATHERS[0].targetID, r.targetID);\n      }\n    }\n  }\n\n  if (relationships.WIVES && relationships.WIVES.length !== 0) {\n    for (let i = 0; i < relationships.WIVES.length; i++) {\n      let r = relationships.WIVES[i];\n      g.setNode(r.targetID, {\n        label: r.target,\n        width: width,\n        height: height,\n        shape: \"ellipse\"\n      });\n      g.setEdge(r.targetID, id, {\n        label: \"wife\",\n        arrowhead: \"undirected\"\n      });\n    }\n  }\n\n  if (relationships.HUSBANDS && relationships.HUSBANDS.length !== 0) {\n    for (let i = 0; i < relationships.HUSBANDS.length; i++) {\n      let r = relationships.HUSBANDS[i];\n      g.setNode(r.targetID, {\n        label: r.target,\n        width: width,\n        height: height,\n        shape: \"ellipse\"\n      });\n      g.setEdge(r.targetID, id, {\n        label: \"husband\",\n        arrowhead: \"undirected\"\n      });\n    }\n  }\n\n  // Add nodes for children, and add links for other parents of children (aka. mistresses but not spouses)\n  if (relationships.CHILDREN && relationships.CHILDREN.length !== 0) {\n    for (let i = 0; i < relationships.CHILDREN.length; i++) {\n      let r = relationships.CHILDREN[i].child;\n      let p = relationships.CHILDREN[i].otherParentIDs;\n      for (let j = 0; j < r.length; j++) {\n        // For each child in the children grouping\n        if (\n          entities[r[j].targetID] &&\n          entities[r[j].targetID][\"Type of entity\"] === \"Agent\"\n        ) {\n          g.setNode(r[j].targetID, {\n            label: r[j].target,\n            width: width,\n            height: height,\n            shape: \"ellipse\"\n          });\n        } else if (\n          entities[r[j].targetID] &&\n          (entities[r[j].targetID][\"Type of entity\"] === \"Collective (misc.)\" ||\n            entities[r[j].targetID][\"Type of entity\"] ===\n              \"Collective (genealogical)\")\n        ) {\n          g.setNode(r[j].targetID, {\n            label: r[j].target,\n            width: width,\n            height: height,\n            shape: \"ellipse\",\n            style: \"stroke: red\"\n          });\n        }\n        g.setEdge(id, r[j].targetID, {\n          label: \"child\"\n        });\n\n        // Link to the other parents\n        for (let k = 0; k < p.length; k++) {\n          g.setNode(p[k], {\n            label: getName(entities[p[k]]),\n            width: width,\n            height: height,\n            shape: \"ellipse\"\n          });\n          g.setEdge(p[k], r[j].targetID, {\n            label: p.length > 1 ? \"disputed\\nother parent\" : \"other parent\",\n            class: p.length > 1 ? \"disputedEdge\" : \"normalEdge\",\n            id:\n              p.length > 1\n                ? getGender(r[j].targetID) === \"Female\"\n                  ? \"disputed child mother\"\n                  : \"disputed child father\"\n                : \"otherparent\"\n          });\n        }\n      }\n    }\n  }\n\n  let edges = g.edges();\n  if (depth > 1) {\n    for (let i = 0; i < edges.length; i++) {\n      // Does this actually update g?\n      // Recursive call to getAllLinks()\n      getAllRelationshipLinks(\n        g,\n        depth - 1,\n        edges[i].v,\n        JSON.parse(relationships[edges[i].v]).relationships\n      );\n    }\n  }\n};\n","import React from \"react\";\nimport \"./App.css\";\nimport { getGraph } from \"./GraphHandler\";\nimport { checkNoRelations, checkNoMembers, getName } from \"./DataCardHandler\";\nimport entities from \"./data/entities.json\";\nimport passages from \"./data/passages.json\";\nimport relationships from \"./data/relationships.json\";\nimport * as d3 from \"d3\";\nimport dagreD3 from \"dagre-d3\";\n\nclass EntityGraph extends React.Component {\n  // For Refs, see: https://stackoverflow.com/questions/33796267/how-to-use-refs-in-react-with-typescript\n  // For general setup, see: https://stackoverflow.com/questions/32292622/react-component-with-dagre-d3-not-drawing-correctly/32293469#32293469\n  // For findDOMNode in Typescript, see: https://stackoverflow.com/questions/32480321/using-react-finddomnode-in-typescript\n  // How to use DagreJS https://dagrejs.github.io/project/dagre-d3/latest/demo/interactive-demo.html, https://github.com/dagrejs/graphlib/wiki/API-Reference\n  // Zooming: https://jsfiddle.net/xa9rofm5/10/\n\n  constructor(props) {\n    super(props);\n    this.state = {\n      openInfoPage: { showDisputePage: false, showUnusualPage: false },\n      edgeType: \"\",\n      targetID: \"\"\n    };\n    this.handleClickedNode = this.handleClickedNode.bind(this);\n    this.handleClickedEdge = this.handleClickedEdge.bind(this);\n  }\n\n  componentDidUpdate() {\n    // Return the graph with populated nodes\n    if (\n      !checkNoRelations(this.props.relationships) ||\n      !checkNoMembers(this.props.members)\n    ) {\n      let g = getGraph(\n        1,\n        this.props.id,\n        this.props.relationships,\n        this.props.members\n      );\n\n      // Set up an SVG group so that we can translate the final graph.\n      let svg = d3.select(this.nodeTree);\n      let inner = d3.select(this.nodeTreeGroup);\n\n      // Set up zoom support\n      var zoom = d3.zoom().on(\"zoom\", function() {\n        inner.attr(\"transform\", d3.event.transform);\n      });\n      svg.call(zoom);\n\n      // Run the renderer. This is what draws the final graph.\n      var render = new dagreD3.render();\n      render(inner, g);\n\n      // Center the graph\n      var initialScale = 0.3;\n      svg.call(\n        zoom.transform,\n        d3.zoomIdentity\n          .translate(\n            (svg.attr(\"viewBox\").split(\" \")[2] -\n              g.graph().width * initialScale) /\n              2,\n            20\n          )\n          .scale(initialScale)\n      );\n\n      // svg.attr(\"height\", g.graph().height * initialScale + 40);\n      svg.attr(\"height\", 500);\n\n      /* Make all entity nodes clickable */\n      var nodeSelected = svg.selectAll(\"g.node\");\n      nodeSelected.on(\"click\", this.handleClickedNode);\n\n      /* Make disputed edges clickable */\n      var disputedEdgeSelected = svg.selectAll(\"g.edgePath\");\n      /* .attr(\"id\", function(d) {\n          d.split(\" \")[0] === \"dispute\";\n        }); */\n      // console.log(disputedEdgeSelected);\n      // disputedEdgeSelected.on(\"click\", this.handleClickedEdge);\n\n      let that = this;\n      disputedEdgeSelected.on(\"click\", function(d, i) {\n        if (g.edge(d.v, d.w).id.split(\" \")[0] === \"disputed\") {\n          that.handleClickedEdge(d, g.edge(d.v, d.w).id);\n        }\n      });\n    }\n  }\n\n  componentWillReceiveProps() {\n    this.setState({\n      openInfoPage: { showDisputePage: false, showUnusualPage: false }\n    });\n  }\n\n  handleClickedNode(id) {\n    this.props.relationshipClicked(id);\n    // Cheat way to fix edges coming up as disputed when not\n    document.location.reload(true);\n  }\n\n  handleClickedEdge(edge, identifier) {\n    // this.props.disputeClicked(edge, id);\n    let keywords = identifier.split(\" \");\n    let targetID = \"\";\n    let edgeType = \"\";\n\n    if (keywords[0] === \"disputed\") {\n      if (keywords[1] === \"mother\" || keywords[1] === \"father\") {\n        // if is \"disputed mother\"\n        targetID = edge.w;\n        edgeType = keywords[1];\n      } else if (keywords[1] === \"child\") {\n        // if is \"disputed father\"\n        targetID = edge.w;\n        edgeType = keywords[2];\n      }\n    }\n    // console.log(identifier, getName(entities[targetID]));\n    this.setState({\n      openInfoPage: { showDisputePage: true, showUnusualPage: false },\n      edgeType: edgeType,\n      targetID: targetID\n    });\n  }\n\n  getDisputedInfo(targetID, edgeType) {\n    if (targetID && edgeType) {\n      let disputedEntities;\n      if ((edgeType = \"mother\")) {\n        disputedEntities = JSON.parse(relationships[targetID]).relationships\n          .MOTHERS;\n      } else if ((edgeType = \"father\")) {\n        disputedEntities = JSON.parse(relationships[targetID]).relationships\n          .FATHERS;\n      }\n      return (\n        <div>\n          There is an inconsistency between texts.\n          <br /> <br />\n          {disputedEntities.map(e => {\n            return (\n              <div style={{ borderTop: \"100px\" }}>\n                <div style={{ color: \"red\", float: \"left\" }}>--> </div>\n                <div\n                  className=\"entity-button\"\n                  onClick={() => this.handleClickedNode(e.targetID)}\n                >\n                  <span style={{ textDecoration: \"underline\" }}>\n                    {e.target}{\" \"}\n                  </span>\n                </div>\n                is {edgeType} of {getName(entities[targetID])} in{\" \"}\n                {e.passage.map(passage => {\n                  return this.getPassageLink(passage);\n                })}\n              </div>\n            );\n          })}\n        </div>\n      );\n    } else return \"\";\n  }\n\n  getPassageLink(passage) {\n    let id = passage.startID;\n    let author = passages[id].Author;\n    let title = passages[id].Title;\n    let start = passages[id].Passage;\n    let end = passage.endID;\n\n    // Dealing with multiple URNs\n    let URN = \"\";\n    let URNsplit = passages[id][\"CTS URN\"].split(\", \");\n    if (URNsplit.length >= 2) {\n      URN = URNsplit[1];\n    } else {\n      URN = passages[id][\"CTS URN\"];\n    }\n\n    URN = \"https://scaife.perseus.org/reader/\" + URN;\n    if (passage.endID !== \"\") {\n      end = passages[end].Passage;\n      URN = URN + \"-\" + end;\n    }\n    URN = URN + \"/?right=perseus-eng2\";\n\n    return (\n      <span>\n        {\"  (\"}\n        <a\n          target=\"_blank\"\n          rel=\"noopener noreferrer\"\n          href={URN}\n          style={{\n            color: \"grey\",\n            fontSize: \"0.8rem\"\n          }}\n        >\n          {author + \", \"}\n          <span style={{ fontStyle: \"italic\" }}>{title}</span> {start}\n          {start !== end && end !== \"\" ? \"-\" + end : \"\"}\n        </a>\n        {\")\"}\n      </span>\n    );\n  }\n\n  render() {\n    return (\n      <div\n        style={{\n          maxWidth: \"80%\",\n          maxHeight: \"20rem\",\n          padding: \"1rem 7rem 1rem 7rem\",\n          textAlign: \"center\"\n        }}\n      >\n        <h1>Relationship Graph for {getName(entities[this.props.id])}</h1>\n        <div style={{ marginBottom: \"2rem\" }}>\n          <h2>Legend:</h2>\n          <div style={{ marginBottom: \"2rem\", marginTop: \"2rem\" }}>\n            {/* <span id=\"legend-mainnode\">Main node</span> */}\n            <span id=\"legend-relationnode\">Agent node</span>\n            <span id=\"legend-collectivenode\">Collective node</span>\n          </div>\n          <div style={{ marginBottom: \"2rem\" }}>\n            <span id=\"legend-relationedge\">Genealogical connection</span>\n            <span id=\"legend-disputededge\">Disputed tradition</span>\n            <span id=\"legend-unusualedge\">Unusual connection</span>\n            <span id=\"legend-memberedge\">Member of collective</span>\n          </div>\n        </div>\n\n        <div>\n          {/* Show disputed relationships page */}\n          <div\n            style={{ textAlign: \"left\" }}\n            className={\n              this.state.openInfoPage.showDisputePage\n                ? \"info-page-border\"\n                : \"no-display\"\n            }\n          >\n            <h3>Disputed Tradition </h3>\n            {this.getDisputedInfo(this.state.targetID, this.state.edgeType)}\n          </div>\n\n          {/* Show unusual relationships page */}\n          <div\n            className={\n              this.state.openInfoPage.showUnusualPage\n                ? \"info-page-border\"\n                : \"no-display\"\n            }\n          >\n            Show unusual page\n          </div>\n        </div>\n\n        <svg\n          id=\"nodeTree\"\n          ref={ref => {\n            this.nodeTree = ref;\n          }}\n          // width=\"80%\"\n          // height\"1000\"\n          viewBox=\"0 0 800 500\"\n          style={{ border: \"1px solid black\", marginBottom: \"2rem\" }}\n        >\n          <g\n            ref={r => {\n              this.nodeTreeGroup = r;\n            }}\n          />\n        </svg>\n      </div>\n    );\n  }\n}\n\nexport default EntityGraph;\n","import React from \"react\";\nimport \"./App.css\";\nimport \"./DataCards.scss\";\nimport queryString from \"querystring\";\nimport passages from \"./data/passages.json\";\nimport relationships from \"./data/relationships.json\";\nimport EntityGraph from \"./EntityGraph.jsx\";\nimport ReactGA from \"react-ga\";\nimport entities from \"./data/entities.json\";\nimport {\n  relationshipInfo,\n  checkNoRelations,\n  getAlternativeNames,\n  getGender,\n  getName,\n  getEntityType\n} from \"./DataCardHandler\";\nimport Pluralize from \"pluralize\";\n\ntype DatumProps = {\n  location: {\n    search: string;\n  };\n  history: {\n    push: ({}) => null;\n  };\n};\ntype DatumState = {\n  id: string;\n  name: string;\n  relationships: relationshipInfo;\n  members: { sub: any[]; super: any[] };\n  type: string;\n  validSearch: boolean;\n  alternativeName: { targetID: string; passage: any[] };\n};\n\nclass DataCards extends React.Component<DatumProps, DatumState> {\n  constructor(props: any) {\n    super(props);\n    // Dionysus is 8188175, use to test multiple names\n    // Atreus is 8187873\n    // Theseus is 8188822\n    // Agamemnon is 8182035\n    // Use Clytaimnestra example, 8188055\n    this.state = {\n      id: \"8182035\", // placeholder\n      name: \"\",\n      relationships: {\n        MOTHERS: [],\n        FATHERS: [],\n        SIBLINGS: [],\n        TWIN: [],\n        SPOUSES: [],\n        CHILDREN: []\n      },\n      members: { sub: [], super: [] },\n      type: \"\",\n      validSearch: false,\n      alternativeName: { targetID: \"\", passage: [] }\n    };\n    /* this.getNameFromID = this.getNameFromID.bind(this);\n    this.checkNoRelations = this.checkNoRelations.bind(this);\n    this.reversedVerb = this.reversedVerb.bind(this);\n    this.getDataPoints = this.getDataPoints.bind(this); */\n    this.handleNameClicked = this.handleNameClicked.bind(this);\n    // this.handleDisputeClicked = this.handleDisputeClicked.bind(this);\n    /* this.getAlternativeNames = this.getAlternativeNames.bind(this); */\n  }\n\n  /*******************/\n  /* HELPER FUNCTIONS */\n  /*******************/\n\n  getPassageLink(passage: any) {\n    let id = passage.startID;\n    let author: string = passages[id].Author;\n    let title: string = passages[id].Title;\n    let start: string = passages[id].Passage;\n    let end: string = passage.endID;\n\n    // Dealing with multiple URNs\n    let URN: string = \"\";\n    let URNsplit = passages[id][\"CTS URN\"].split(\", \");\n    if (URNsplit.length >= 2) {\n      URN = URNsplit[1];\n    } else {\n      URN = passages[id][\"CTS URN\"];\n    }\n\n    URN = \"https://scaife.perseus.org/reader/\" + URN;\n    if (passage.endID !== \"\") {\n      end = passages[end].Passage;\n      URN = URN + \"-\" + end;\n    }\n    URN = URN + \"/?right=perseus-eng2\";\n\n    return (\n      <span>\n        {\"  (\"}\n        <a\n          target=\"_blank\"\n          rel=\"noopener noreferrer\"\n          href={URN}\n          style={{\n            color: \"grey\",\n            fontSize: \"0.8rem\"\n          }}\n        >\n          {author + \", \"}\n          <span style={{ fontStyle: \"italic\" }}>{title}</span> {start}\n          {start !== end && end !== \"\" ? \"-\" + end : \"\"}\n        </a>\n        {\")\"}\n      </span>\n    );\n  }\n\n  handleNameClicked(targetID: string) {\n    ReactGA.event({\n      category: \"NameClicked\",\n      action: \"User clicked on a name within the data card\"\n    });\n    this.props.history.push(\"/datacards?id=\" + targetID);\n  }\n\n  /* handleDisputeClicked(edge: any, id: string) {\n    console.log(\"edge\", edge, \"id\", id);\n    this.setState({\n      openInfoPage: { showDisputePage: true, showUnusualPage: false }\n    });\n  } */\n\n  getDataPoints(relationship: string, showPassage: boolean) {\n    console.log(relationship);\n    let that = this;\n    let focus =\n      relationship === \"PART OF\"\n        ? this.state.members.super\n        : that.state.relationships[relationship];\n    if (focus.length !== 0) {\n      return (\n        <div style={{ clear: \"both\" }}>\n          <div\n            style={{\n              fontWeight: \"bold\",\n              textTransform: \"uppercase\",\n              float: \"left\",\n              paddingRight: \"1rem\",\n              marginTop: \"0.5rem\"\n            }}\n          >\n            {this.getPluralization(relationship)}\n          </div>\n          <div style={{ float: \"left\", marginTop: \"0.5rem\" }}>\n            {focus.map(entity => {\n              return (\n                <div style={{ margin: \"0\" }}>\n                  {this.checkUnusualRelationship(\n                    entity,\n                    relationship,\n                    showPassage\n                  )}\n                </div>\n              );\n            })}\n          </div>\n        </div>\n      );\n    } else {\n      return null;\n    }\n  }\n\n  getPluralization(relationship: string) {\n    if (relationship === \"PART OF\") {\n      return relationship + \": \";\n    } else if (relationship === \"MOTHERS\" || relationship === \"FATHERS\") {\n      return Pluralize.singular(relationship) + \": \";\n    } else {\n      if (this.state.relationships[relationship].length === 1) {\n        return Pluralize.singular(relationship) + \": \";\n      } else {\n        return relationship + \": \";\n      }\n    }\n  }\n\n  checkUnusualRelationship(\n    entity: any,\n    relationship: any,\n    showPassage: boolean\n  ) {\n    let that = this;\n\n    if (\n      (relationship === \"MOTHERS\" && entity.mother_parthenogenesis) ||\n      (relationship === \"FATHERS\" && entity.father_parthenogenesis)\n    ) {\n      return (\n        <span>\n          <div\n            className=\"entity-button\"\n            onClick={() => this.handleNameClicked(entity.targetID)}\n          >\n            {entity !== that.state.relationships[relationship][0] ? (\n              <span>OR </span>\n            ) : (\n              \"\"\n            )}\n            <span style={{ textDecoration: \"underline\" }}>{entity.target}</span>\n          </div>\n          <span> by pathenogenesis </span>\n          {showPassage\n            ? entity.passage.map(passage => {\n                return this.getPassageLink(passage);\n              })\n            : \"\"}\n        </span>\n      );\n    } else if (relationship === \"FATHERS\" && entity.autochthony) {\n      return (\n        <span>\n          {entity !== that.state.relationships[relationship][0] ? (\n            <span>OR </span>\n          ) : (\n            \"\"\n          )}\n          <span>By autochthony </span>\n          {showPassage\n            ? entity.passage.map(passage => {\n                return this.getPassageLink(passage);\n              })\n            : \"\"}\n        </span>\n      );\n    } else if (relationship === \"CHILDREN\") {\n      return (\n        <div className=\"entity-child-wrapper\">\n          <div className=\"entity-child-grouping\">\n            {that.getChildParentGrouped(entity)}\n          </div>\n          {that.getOtherParentText(entity.otherParentIDs)}\n        </div>\n      );\n    } else {\n      console.log(\"ID\", entity.targetID);\n      return (\n        <span>\n          <div\n            className=\"entity-button\"\n            onClick={() => this.handleNameClicked(entity.targetID)}\n          >\n            {relationship !== \"CHILDREN\" &&\n            relationship !== \"SIBLINGS\" &&\n            relationship !== \"SPOUSES\" &&\n            relationship !== \"PART OF\" &&\n            entity !== that.state.relationships[relationship][0] ? (\n              <span>OR </span>\n            ) : (\n              \"\"\n            )}\n            <span style={{ textDecoration: \"underline\" }}>{entity.target}</span>\n          </div>\n          {showPassage ? (\n            entity.passage.map(passage => {\n              return this.getPassageLink(passage);\n            })\n          ) : (\n            <span style={{ paddingRight: \"10rem\" }}></span>\n          )}\n        </span>\n      );\n    }\n  }\n\n  getChildParentGrouped(group: any) {\n    return group.child.map(c => {\n      return (\n        <div\n          className=\"entity-child-button\"\n          onClick={() => this.handleNameClicked(c.targetID)}\n        >\n          {c.target}\n        </div>\n      );\n    });\n  }\n\n  getOtherParentText(otherParentIDs: any[]) {\n    if (otherParentIDs.length === 0) {\n      return <div className=\"entity-parent-grouping\"></div>;\n    } else {\n      return (\n        <div className=\"entity-parent-grouping\">\n          with{\" \"}\n          {otherParentIDs.map(pID => {\n            return (\n              <span>\n                <span\n                  className=\"entity-child-button\"\n                  style={{ margin: 0 }}\n                  onClick={() => this.handleNameClicked(pID)}\n                >\n                  {getName(entities[pID])}\n                </span>\n                {otherParentIDs.indexOf(pID) === otherParentIDs.length - 1\n                  ? \"\"\n                  : \" OR \"}\n              </span>\n            );\n          })}\n        </div>\n      );\n    }\n  }\n\n  getCollectiveMembers() {\n    let that = this;\n    if (that.state.members.sub.length !== 0) {\n      return (\n        <div style={{ marginTop: \"3rem\", textAlign: \"center\" }}>\n          <div\n            style={{\n              fontWeight: \"bold\",\n              textTransform: \"uppercase\",\n              textDecoration: \"underline\",\n              marginBottom: \"0.5rem\",\n              marginTop: \"5rem\"\n            }}\n          >\n            MEMBERS:\n          </div>\n          {that.state.members.sub.map(member => {\n            return (\n              <div style={{ margin: \"0\" }}>\n                <span\n                  className=\"collective-button\"\n                  onClick={() => this.handleNameClicked(member.targetID)}\n                >\n                  {member.target}\n                </span>\n                {member.passage.map(passage => {\n                  return this.getPassageLink(passage);\n                })}\n              </div>\n            );\n          })}\n        </div>\n      );\n    }\n  }\n\n  getCollectiveSubheading(id: string) {\n    let relation = getGender(id) === \"Female\" ? \"daughters\" : \"sons\";\n    // How to deal with multiple of the same ID in the entities?\n    let parents = getName(\n      entities[entities[id][\"Collective (geneal.): children of ID\"]]\n    );\n    if (entities[id][\"Other collective parent ID\"]) {\n      parents =\n        parents +\n        \" and \" +\n        getName(entities[entities[id][\"Other collective parent ID\"]]);\n    }\n    let divineParents = entities[id][\"Collective (geneal.): divine father ID\"]\n      ? \"OR \" +\n        getName(\n          entities[entities[id][\"Collective (geneal.): divine father ID\"]]\n        )\n      : \"\";\n    /* let parents: { mothers: string; fathers: string } = {\n      mothers: \"\",\n      fathers: \"\"\n    };\n    for (let i = 0; i < this.state.relationships.MOTHERS.length; i++) {\n      if (parents.mothers === \"\") {\n        parents.mothers = this.state.relationships.MOTHERS[i].target;\n      } else {\n        parents.mothers =\n          parents.mothers + \" OR \" + this.state.relationships.MOTHERS[i].target;\n      }\n    }\n    for (let i = 0; i < this.state.relationships.FATHERS.length; i++) {\n      if (parents.fathers === \"\") {\n        parents.fathers = this.state.relationships.FATHERS[i].target;\n      } else {\n        parents.fathers =\n          parents.fathers + \" OR \" + this.state.relationships.FATHERS[i].target;\n      }\n    }\n    let finalString = \"\";\n    if (parents.mothers !== \"\" && parents.fathers !== \"\") {\n      finalString = parents.mothers + \" and \" + parents.fathers;\n    } else if (parents.mothers !== \"\" && parents.fathers === \"\") {\n      finalString = parents.mothers;\n    } else if (parents.mothers === \"\" && parents.fathers !== \"\") {\n      finalString = parents.fathers;\n    } else {\n    } */\n\n    return (\n      <div id=\"datacard-alternativename\">\n        The {relation} of {parents} {divineParents}\n      </div>\n    );\n  }\n\n  getAlternativePage() {\n    if (\n      this.state.alternativeName.targetID !== \"\" &&\n      this.state.alternativeName.passage !== []\n    ) {\n      return (\n        <div\n          id=\"datacard-alternativename\"\n          className={\n            this.state.alternativeName.targetID === \"\" ||\n            this.state.alternativeName.passage === []\n              ? \"no-display\"\n              : \"\"\n          }\n        >\n          Alternative name for{\" \"}\n          {this.state.alternativeName.targetID === \"\" ? (\n            \"\"\n          ) : (\n            <span>\n              <span\n                className=\"entity-alt-button\"\n                onClick={() =>\n                  this.handleNameClicked(this.state.alternativeName.targetID)\n                }\n              >\n                {getName(entities[this.state.alternativeName.targetID])}\n              </span>\n              {this.state.alternativeName.passage.map(passage => {\n                return this.getPassageLink(passage);\n              })}\n            </span>\n          )}\n        </div>\n      );\n    } else {\n      return null;\n    }\n  }\n\n  /*******************/\n  /* SETUP FUNCTIONS */\n  /*******************/\n\n  componentDidMount() {\n    const params = queryString.parse(this.props.location.search.slice(1));\n    const id = params.id as string;\n    if (!params.id) {\n      // Handle bad url\n      //@ts-ignore\n      this.setState({ validSearch: false });\n    } else {\n      //Substitute with ID\n      let newState = JSON.parse(relationships[id]);\n      this.setState({\n        id: newState.id,\n        relationships: newState.relationships,\n        members: newState.members,\n        name: newState.name,\n        type: newState.type,\n        validSearch: newState.validSearch,\n        alternativeName: newState.alternativeName\n      });\n    }\n  }\n\n  componentDidUpdate() {\n    const params = queryString.parse(this.props.location.search.slice(1));\n    const id = params.id as string;\n    if (!params.id) {\n      // Handle bad url\n      //@ts-ignore\n      this.setState({ validSearch: false });\n    } else if (this.state.id !== id) {\n      //Substitute with ID\n      let newState = JSON.parse(relationships[id]);\n      this.setState({\n        id: newState.id,\n        relationships: newState.relationships,\n        members: newState.members,\n        name: newState.name,\n        type: newState.type,\n        validSearch: newState.validSearch,\n        alternativeName: newState.alternativeName\n      });\n    }\n  }\n\n  /*************/\n  /* RENDERING */\n  /*************/\n\n  render() {\n    return (\n      <React.Fragment>\n        <div\n          className={this.state.validSearch ? \"no-display\" : \"\"}\n          style={{ textAlign: \"center\", padding: \"3rem\" }}\n        >\n          No profiles have been selected. Try using the Search function.\n        </div>\n        <div className={this.state.validSearch ? \"\" : \"no-display\"}>\n          <div\n            style={{\n              margin: \"1rem 6rem 3rem 6rem\",\n              padding: \"3rem\",\n              display: \"flow-root\",\n              border: \"solid 1px black\"\n            }}\n          >\n            <div style={{ textAlign: \"center\" }}>\n              {getEntityType(this.state.id)}\n            </div>\n            <div id=\"datacard-heading\">{this.state.name}</div>\n            <div id=\"datacard-othernames\">\n              {getAlternativeNames(this.state.id)}\n            </div>\n            <div id=\"datacard-mantoID\">MANTO ID: {this.state.id}</div>\n            <div\n              id=\"datacard-othernames\"\n              className={getGender(this.state.id) === \"\" ? \"no-display\" : \"\"}\n            >\n              Gender: {getGender(this.state.id)}\n            </div>\n            {/* If no data is available for the subject */}\n            <div\n              className={\n                checkNoRelations(this.state.relationships) ? \"\" : \"no-display\"\n              }\n            ></div>\n            {/* If current entity is an alternative name for an existing entity */}\n            <div>{this.getAlternativePage()}</div>\n            {/* If data is available for the subject */}\n            {entities[this.state.id][\"Type of entity\"] ===\n            \"Collective (genealogical)\"\n              ? this.getCollectiveSubheading(this.state.id)\n              : Object.keys(this.state.relationships).map(key => {\n                  if (\n                    key === \"MOTHERS\" ||\n                    key === \"FATHERS\" ||\n                    key === \"SPOUSES\"\n                  ) {\n                    return <div key={key}>{this.getDataPoints(key, true)}</div>;\n                  } else {\n                    return (\n                      <div key={key}>{this.getDataPoints(key, false)}</div>\n                    );\n                  }\n                })}\n            {this.state.members.super.length !== 0 ? (\n              <div>{this.getDataPoints(\"PART OF\", true)}</div>\n            ) : (\n              \"\"\n            )}\n            <div>{this.getCollectiveMembers()}</div>\n          </div>\n        </div>\n        <div\n          className={\n            entities[this.state.id][\"Type of entity\"] === \"Agent\"\n              ? \"\"\n              : \"no-display\"\n          }\n        >\n          <EntityGraph\n            id={this.state.id}\n            relationships={this.state.relationships}\n            relationshipClicked={this.handleNameClicked}\n            // disputeClicked={this.handleDisputeClicked}\n            members={this.state.members}\n          ></EntityGraph>\n        </div>\n      </React.Fragment>\n    );\n  }\n}\n\nexport default DataCards;\n","import React from \"react\";\nimport \"./App.css\";\nimport Header from \"./Header\";\nimport Search from \"./Search\";\nimport DataCards from \"./DataCards\";\nimport ReactGA from \"react-ga\";\nimport {\n  HashRouter as Router,\n  Route,\n  Link,\n  Switch,\n  Redirect\n} from \"react-router-dom\";\n\nclass App extends React.Component<{}, {}> {\n  constructor(props: any) {\n    super(props);\n    this.state = {\n      subjectID: \"\"\n    };\n  }\n\n  changeEntity(ID: string) {\n    this.setState({ subjectID: ID });\n  }\n\n  initializeReactGA() {\n    ReactGA.initialize(\"UA-151993194-1\");\n    ReactGA.pageview(\"/homepage\");\n  }\n\n  render() {\n    return (\n      <div\n        style={{ backgroundColor: \"#eeeeee\", height: \"100%\", width: \"100%\" }}\n      >\n        <Router>\n          <Link to=\"/\">\n            <Header></Header>\n          </Link>\n          <Search></Search>\n          <Switch>\n            {/* <Route exact path=\"/\" component={Home} /> */}\n            <Route path=\"/search\" component={Search} />\n            <Route path=\"/datacards\" component={DataCards} />\n            <Route component={() => <Redirect to=\"/\" />} />\n          </Switch>\n        </Router>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}