{"version":3,"sources":["images/arrow.svg","images/logo.svg","Header.tsx","Search.tsx","EntityGraph.tsx","DataCardHandler.ts","DataCards.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["module","exports","Header","style","paddingTop","textAlign","src","require","alt","width","Search","props","pageRedirect","state","redirect","to","targetID","handleSearch","bind","handleSearchKeyDown","getDescriptors","id","this","hasKey","entities","alternatives","ReactGA","event","category","action","currentInput","document","getElementById","value","split","currentInputName","trim","setState","which","keyCode","obj","key","Fragment","margin","placeholder","list","onKeyDown","fontSize","maxHeight","Object","values","map","entity","arrow","onClick","className","React","Component","EntityGraph","familyTies","updateComponent","connections","getAllConnections","sortConnectionsIntoRelationships","ties","forEach","tieRow","includes","Verb","passageInfo","start","startID","end","endID","getGender","gender","push","target","verb","passage","reversedVerb","name","type","members","relationships","MOTHERS","FATHERS","SIBLINGS","TWIN","SPOUSES","CHILDREN","tie","d","checkAndRemoveDuplicates","getIndirectSiblings","alphabetize","validSearch","entityDuplicate","e","passageDuplicate","p","relation","length","sort","a","b","relationA","toUpperCase","relationB","dirObject","console","log","mothers","fathers","siblings","getNameString","parameter","stringSoFar","s","DataCards","author","passages","Author","title","Title","Passage","URN","URNsplit","rel","href","color","fontStyle","history","relationship","showPassage","that","clear","fontWeight","textTransform","float","paddingRight","Pluralize","singular","handleNameClicked","textDecoration","getPassageLink","marginTop","marginBottom","member","params","queryString","parse","location","search","slice","newState","padding","display","border","getAlternativeNames","keys","getDataPoints","getCollectiveMembers","App","subjectID","ID","initialize","pageview","backgroundColor","height","path","component","Boolean","window","hostname","match","ReactDOM","render","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"ijkrCAAAA,EAAOC,QAAU,IAA0B,mC,y150ECA3CD,EAAOC,QAAU,IAA0B,kC,8ICe5BC,G,MAZU,WACvB,OACE,yBAAKC,MAAO,CAAEC,WAAY,OAAQC,UAAW,WAC3C,yBACEC,IAAKC,EAAQ,IACbC,IAAI,aACJL,MAAO,CAAEM,MAAO,Y,gDCyJTC,E,YApJb,WAAYC,GAAa,IAAD,8BACtB,4CAAMA,KAqCRC,aAAe,WACb,GAAI,EAAKC,MAAMC,SACb,OAAO,kBAAC,IAAD,CAAUC,GAAI,iBAAmB,EAAKF,MAAMG,YAtCrD,EAAKH,MAAQ,CACXC,UAAU,EACVE,SAAU,IAGZ,EAAKC,aAAe,EAAKA,aAAaC,KAAlB,gBACpB,EAAKC,oBAAsB,EAAKA,oBAAoBD,KAAzB,gBAC3B,EAAKE,eAAiB,EAAKA,eAAeF,KAApB,gBATA,E,4EAYTG,GACb,GAAIC,KAAKC,OAAOC,EAAUH,GAAK,CAC7B,IAAII,EAAuB,GAoB3B,MAnB+C,KAA3CD,EAASH,GAAI,4BACfI,EACEA,EAAe,KAAOD,EAASH,GAAI,2BAEE,KAArCG,EAASH,GAAI,sBACfI,EAAeA,EAAe,KAAOD,EAASH,GAAI,qBAER,KAAxCG,EAASH,GAAI,yBACfI,EACEA,EAAe,KAAOD,EAASH,GAAI,wBAEG,KAAtCG,EAASH,GAAI,uBACfI,EAAeA,EAAe,KAAOD,EAASH,GAAI,sBAGlDG,EAASH,GAAI,4BACbI,EACA,KACAD,EAASH,GAAI,8B,qCAYjBK,IAAQC,MAAM,CACZC,SAAU,SACVC,OAAQ,qDAEV,IAAIC,EAAeC,SAASC,eAAe,SAC3C,GAA2B,KAAvBF,EAAaG,MAEf,IAAK,IAAIZ,KAAMG,EACb,GAAIF,KAAKC,OAAOC,EAAUH,IAEtBG,EAASH,GAAI,6BACbS,EAAaG,MAAMC,MAAM,MAAM,GAC/B,CACA,IAAIC,EAAmBL,EAAaG,MACjCC,MAAM,MAAM,GACZA,MAAM,KAAK,GACXE,OAGDD,IAAqBX,EAASH,GAAI,6BAClCc,IAAqBX,EAASH,GAAI,2BAClCc,IAAqBX,EAASH,GAAI,qBAClCc,IAAqBX,EAASH,GAAI,wBAClCc,IAAqBX,EAASH,GAAI,sBAElCC,KAAKe,SAAS,CACZvB,UAAU,EACVE,SAAUK,O,0CASJM,GACE,KAAhBA,EAAMW,OAAkC,KAAlBX,EAAMY,SAC9BjB,KAAKL,iB,6BAKCuB,EAAQC,GAChB,OAAOA,KAAOD,I,+BAGN,IAAD,OASP,OACE,kBAAC,IAAME,SAAP,KAEGpB,KAAKV,eACN,yBACET,MAAO,CACLwC,OAAQ,gBACRtC,UAAW,WASb,2BAEEuC,YAAY,iBACZvB,GAAG,QACHwB,KAAK,WACLC,UAAWxB,KAAKH,oBAChBhB,MAAO,CAAEM,MAAO,MAAOJ,UAAW,SAAU0C,SAAU,UAExD,8BAAU1B,GAAG,WAAWlB,MAAO,CAAE6C,UAAW,UACzCC,OAAOC,OAAO1B,GAAU2B,IAAI,SAAAC,GAC3B,OACE,4BACEnB,MAAO,EAAKb,eAAegC,EAAO,kBAK1C,6BACE,yBACE5C,IAAI,gBACJF,IAAK+C,IACLC,QAAShC,KAAKL,aACdsC,UAAU,wB,GA5IHC,IAAMC,W,iCCYZC,E,YAhBb,WAAY/C,GAAa,qEACjBA,I,qEAGAU,GACN,OAAOG,EAASH,GAAI,8B,+BAOpB,OAAO,kC,GAbemC,IAAMC,W,QCkB5BE,EAAa,CAEf,eACA,eACA,eAEA,cAEA,gBACA,aACA,gBAEA,eACA,UACA,4CAWA,aACA,gBAMWC,EAAkB,SAACvC,GAC9B,IAAIwC,EAAcC,EAAkBzC,GACpC,OAAO0C,EAAiC1C,EAAIwC,IAQxCC,EAAoB,SAACzC,GACzB,IAAIwC,EAKE,GAyFN,OAvFAZ,OAAOC,OAAOc,GAAMC,QAAQ,SAASC,GAEnC,GAAI1C,EAAS0C,EAAO,eAAgB,CAIlC,GACEA,EAAO,sBAAwB7C,GAC/BsC,EAAWQ,SAASD,EAAOE,MAC3B,CACA,IAAIC,EAA6B,CAC/B,CACEC,MAAOJ,EAAO,kBACdK,QAASL,EAAO,qBAChBM,IAAgC,KAA3BN,EAAO,gBAAyB,GAAKA,EAAO,gBACjDO,MAAOP,EAAO,qBAKdQ,EAAUR,EAAO,gBAAkC,YAAhBA,EAAOE,OACG,WAA3CM,EAAUR,EAAO,eAAeS,OAClCT,EAAOE,KAAO,aACsC,SAA3CM,EAAUR,EAAO,eAAeS,SACzCT,EAAOE,KAAO,kBAKlBP,EAAYe,KAAK,CACfC,OAAQrD,EAAS0C,EAAO,eAAe,4BACvClD,SAAUkD,EAAO,cACjBY,KAAMZ,EAAOE,KACbW,QAASV,IAOb,GAAIH,EAAO,gBAAkB7C,GAAMsC,EAAWQ,SAASD,EAAOE,MAAO,CACnE,IAAIC,EAA6B,CAC/B,CACEC,MAAOJ,EAAO,kBACdK,QAASL,EAAO,qBAChBM,IAAgC,KAA3BN,EAAO,gBAAyB,GAAKA,EAAO,gBACjDO,MAAOP,EAAO,qBAKlBL,EAAYe,KAAK,CACfC,OACErD,EAAS0C,EAAO,qBAAqB,4BACvClD,SAAUkD,EAAO,oBACjBY,KAAME,EAAad,EAAOE,KAAMF,EAAO,qBACvCa,QAASV,IASb,GACEH,EAAO,8BAAgC7C,GACvCsC,EAAWQ,SAASD,EAAOE,MAC3B,CACA,IAAIC,EAA6B,CAC/B,CACEC,MAAOJ,EAAO,kBACdK,QAASL,EAAO,qBAChBM,IAAgC,KAA3BN,EAAO,gBAAyB,GAAKA,EAAO,gBACjDO,MAAOP,EAAO,qBAGlBL,EAAYe,KAAK,CACfC,OACErD,EAAS0C,EAAO,qBAAqB,4BACvClD,SAAUkD,EAAO,oBACjBY,KAAME,EAAad,EAAOE,KAAMF,EAAO,qBACvCa,QAASV,QAKVR,GAQHE,EAAmC,SAAC1C,EAAYwC,GAEpD,IAAIoB,EAAOzD,EAASH,GAAI,4BACpB6D,EAAO1D,EAASH,GAAI,kBACpB8D,EAAiB,GACjBC,EAAkC,CACpCC,QAAS,GACTC,QAAS,GACTC,SAAU,GACVC,KAAM,GACNC,QAAS,GACTC,SAAU,IA4FZ,OAzFA7B,EAAYI,QAAQ,SAAA0B,GAIlB,IAAIC,EAAgB,CAClBf,OAAQc,EAAId,OACZ7D,SAAU2E,EAAI3E,SACd+D,QAASY,EAAIZ,QACbG,KAAM1D,EAASmE,EAAI3E,UAAU,mBAMd,iBAAb2E,EAAIb,KAGNM,EAAcC,QAAUQ,EACtBT,EAAcC,QACdO,GAKkB,iBAAbD,EAAIb,KACXM,EAAcE,QAAUO,EACtBT,EAAcE,QACdM,GAMW,cAAbD,EAAIb,MACS,mBAAba,EAAIb,MACS,gBAAba,EAAIb,KAEJM,EAAcM,SAAWG,EACvBT,EAAcM,SACdE,GAMW,iBAAbD,EAAIb,MACS,kBAAba,EAAIb,MACS,kBAAba,EAAIb,KAEJM,EAAcG,SAAWM,EACvBT,EAAcG,SACdK,GAKkB,eAAbD,EAAIb,KACXM,EAAcI,KAAOK,EAAyBT,EAAcI,KAAMI,GAG9C,iBAAbD,EAAIb,MAAwC,YAAba,EAAIb,KAC1CM,EAAcK,QAAUI,EACtBT,EAAcK,QACdG,GAIkB,eAAbD,EAAIb,OACXK,EAAUU,EAAyBV,EAASS,MAKhDR,EAAcG,SAAWO,EACvBV,EAAcC,QACdD,EAAcE,QACdF,EAAcG,UAIhBH,EAAcC,QAAUU,EAAYX,EAAcC,SAClDD,EAAcE,QAAUS,EAAYX,EAAcE,SAClDF,EAAcG,SAAWQ,EAAYX,EAAcG,UACnDH,EAAcI,KAAOO,EAAYX,EAAcI,MAC/CJ,EAAcK,QAAUM,EAAYX,EAAcK,SAClDL,EAAcM,SAAWK,EAAYX,EAAcM,UACnDP,EAAUY,EAAYZ,GAGf,CACL9D,GAAIA,EACJ+D,cAAeA,EACfH,KAAMA,EACNE,QAASA,EACTD,KAAMA,EACNc,aAAa,IAUXH,EAA2B,SAACrE,EAAiBoE,GACjD,IAAIK,GAAkB,EAqBtB,OApBAzE,EAASyC,QAAQ,SAAAiC,GACf,GAAIA,EAAElF,WAAa4E,EAAE5E,SAAU,CAC7BiF,GAAkB,EAClB,IAAIE,GAAmB,EACvBD,EAAEnB,QAAQd,QAAQ,SAAAmC,GAEdA,EAAE7B,UAAYqB,EAAEb,QAAQ,GAAGR,SAC3B6B,EAAE3B,QAAUmB,EAAEb,QAAQ,GAAGN,QAEzB0B,GAAmB,KAGlBA,GACHD,EAAEnB,QAAQH,KAAKgB,EAAEb,QAAQ,OAI1BkB,GACHzE,EAASoD,KAAKgB,GAETpE,GAMHuE,EAAc,SAACM,GACnB,OAAwB,IAApBA,EAASC,OACJ,IAEPD,EAASE,KAAK,SAASC,EAAGC,GACxB,IAAIC,EAAYF,EAAE3B,OAAO8B,cACrBC,EAAYH,EAAE5B,OAAO8B,cACzB,OAAOD,EAAYE,GAAa,EAAIF,EAAYE,EAAY,EAAI,IAG7DP,IAII3B,EAAY,SAACrD,GACxB,OAAOG,EAASH,GAAI,wBAYhB2D,EAAe,SAACF,EAAc+B,GAGlC,MACW,iBAAT/B,GACS,iBAATA,GACS,iBAATA,EAGO,cAKE,cAATA,GACS,mBAATA,GACS,gBAATA,EAE6B,WAAzBJ,EAAUmC,GACL,eAC2B,SAAzBnC,EAAUmC,GACZ,eAGA,GAKO,eAAT/B,EACA,aAKE,iBAATA,GACS,kBAATA,GACS,kBAATA,EAE6B,WAAzBJ,EAAUmC,GACL,eAC2B,SAAzBnC,EAAUmC,GACZ,gBAIA,GAQA,eAAT/B,GACS,kBAATA,GACS,YAATA,EAE6B,WAAzBJ,EAAUmC,GACL,aAC2B,SAAzBnC,EAAUmC,GACZ,gBAGA,WAMTC,QAAQC,IACN,iBACEjC,EACA,IACA+B,EACA,gEACF/B,EACA+B,GAEK,KAWLf,EAAsB,SAC1BkB,EACAC,EACAC,GAiBA,OAAOA,GAkCHC,EAAgB,SAACC,EAAmBC,EAAqBhG,GAC7D,IAAIiG,EAAI,GAQR,MAPgC,KAA5B9F,EAASH,GAAI+F,KAEbE,EADkB,KAAhBD,EACE7F,EAASH,GAAI+F,GAEbC,EAAc,KAAO7F,EAASH,GAAI+F,IAGnCE,G,iBCpLMC,E,YA5Rb,WAAY5G,GAAa,IAAD,8BACtB,4CAAMA,KAMDE,MAAQ,CACXQ,GAAI,UACJ4D,KAAM,GACNG,cAAe,CACbC,QAAS,GACTC,QAAS,GACTC,SAAU,GACVC,KAAM,GACNC,QAAS,GACTC,SAAU,IAEZP,QAAS,GACTD,KAAM,GACNc,aAAa,GApBO,E,4EAkCTjB,GACb,IAAI1D,EAAK0D,EAAQR,QACbiD,EAAiBC,EAASpG,GAAIqG,OAC9BC,EAAgBF,EAASpG,GAAIuG,MAC7BtD,EAAgBmD,EAASpG,GAAIwG,QAC7BrD,EAAcO,EAAQN,MAGtBqD,EAAc,GACdC,EAAWN,EAASpG,GAAI,WAAWa,MAAM,MAc7C,OAPA4F,EAAM,sCALJA,EADEC,EAASzB,QAAU,EACfyB,EAAS,GAETN,EAASpG,GAAI,YAIC,KAAlB0D,EAAQN,QAEVqD,EAAMA,EAAM,KADZtD,EAAMiD,EAASjD,GAAKqD,UAGtBC,GAAY,uBAGV,8BACG,MACD,uBACEjD,OAAO,SACPmD,IAAI,sBACJC,KAAMH,EACN3H,MAAO,CACL+H,MAAO,OACPnF,SAAU,WAGXyE,EAAS,KACV,0BAAMrH,MAAO,CAAEgI,UAAW,WAAaR,GAVzC,IAUwDrD,EACrDA,IAAUE,GAAe,KAARA,EAAa,IAAMA,EAAM,IAE5C,O,wCAKWxD,GAChBU,IAAQC,MAAM,CACZC,SAAU,cACVC,OAAQ,gDAEVP,KAAKX,MAAMyH,QAAQxD,KAAK,iBAAmB5D,K,oCAG/BqH,EAAsBC,GAAuB,IAAD,OACpDC,EAAOjH,KACX,OAAsD,IAAlDiH,EAAK1H,MAAMuE,cAAciD,GAAc/B,OAEvC,yBAAKnG,MAAO,CAAEqI,MAAO,SACnB,yBACErI,MAAO,CACLsI,WAAY,OACZC,cAAe,YACfC,MAAO,OACPC,aAAc,SAGmC,IAAlDtH,KAAKT,MAAMuE,cAAciD,GAAc/B,QACW,eAAnDhF,KAAKT,MAAMuE,cAAciD,GAAc,GAAGnD,KACtC2D,IAAUC,SAAST,GAAgB,KACnCA,EAAe,MAErB,yBAAKlI,MAAO,CAAEwI,MAAO,SAClBJ,EAAK1H,MAAMuE,cAAciD,GAAclF,IAAI,SAAAC,GAC1C,OACE,yBAAKjD,MAAO,CAAEwC,OAAQ,MACpB,yBACEY,UAAU,gBACVD,QAAS,kBAAM,EAAKyF,kBAAkB3F,EAAOpC,YAE5CoC,IAAWmF,EAAK1H,MAAMuE,cAAciD,GAAc,GACjD,qCAEA,GAEF,0BAAMlI,MAAO,CAAE6I,eAAgB,cAC5B5F,EAAOyB,SAGXyD,EACGlF,EAAO2B,QAAQ5B,IAAI,SAAA4B,GACjB,OAAO,EAAKkE,eAAelE,KAE7B,QAQT,O,6CAIa,IAAD,OAErB,OAAkC,IADvBzD,KACFT,MAAMsE,QAAQmB,OAEnB,yBAAKnG,MAAO,CAAE+I,UAAW,OAAQ7I,UAAW,WAC1C,yBACEF,MAAO,CACLsI,WAAY,OACZC,cAAe,YACfM,eAAgB,YAChBG,aAAc,WALlB,YAJK7H,KAcCT,MAAMsE,QAAQhC,IAAI,SAAAiG,GACtB,OACE,yBAAKjJ,MAAO,CAAEwC,OAAQ,MACpB,0BACEY,UAAU,oBACVD,QAAS,kBAAM,EAAKyF,kBAAkBK,EAAOpI,YAE5CoI,EAAOvE,QAETuE,EAAOrE,QAAQ5B,IAAI,SAAA4B,GAClB,OAAO,EAAKkE,eAAelE,SAQhC,O,0CAST,IAAMsE,EAASC,IAAYC,MAAMjI,KAAKX,MAAM6I,SAASC,OAAOC,MAAM,IAC5DrI,EAAKgI,EAAOhI,GAClB,GAAKgI,EAAOhI,GAIL,CAGL,IAAIsI,EAAW/F,EAAgBvC,GAC/BC,KAAKe,SAAS,CACZhB,GAAIsI,EAAStI,GACb+D,cAAeuE,EAASvE,cACxBD,QAASwE,EAASxE,QAClBF,KAAM0E,EAAS1E,KACfC,KAAMyE,EAASzE,KACfc,YAAa2D,EAAS3D,mBAXxB1E,KAAKe,SAAS,CAAE2D,aAAa,M,2CAiB/B,IAAMqD,EAASC,IAAYC,MAAMjI,KAAKX,MAAM6I,SAASC,OAAOC,MAAM,IAC5DrI,EAAKgI,EAAOhI,GAClB,GAAKgI,EAAOhI,IAIL,GAAIC,KAAKT,MAAMQ,KAAOA,EAAI,CAG/B,IAAIsI,EAAW/F,EAAgBvC,GAC/BC,KAAKe,SAAS,CACZhB,GAAIsI,EAAStI,GACb+D,cAAeuE,EAASvE,cACxBD,QAASwE,EAASxE,QAClBF,KAAM0E,EAAS1E,KACfC,KAAMyE,EAASzE,KACfc,YAAa2D,EAAS3D,oBAXxB1E,KAAKe,SAAS,CAAE2D,aAAa,M,+BAoBvB,IDyMqBZ,ECzMtB,OACP,OACE,kBAAC,IAAM1C,SAAP,KACE,yBACEa,UAAWjC,KAAKT,MAAMmF,YAAc,aAAe,GACnD7F,MAAO,CAAEE,UAAW,SAAUuJ,QAAS,SAFzC,kEAMA,yBAAKrG,UAAWjC,KAAKT,MAAMmF,YAAc,GAAK,cAC5C,yBACE7F,MAAO,CACLwC,OAAQ,sBACRiH,QAAS,OACTC,QAAS,YACTC,OAAQ,oBAGV,yBAAKzI,GAAG,oBAAoBC,KAAKT,MAAMoE,MACvC,yBAAK5D,GAAG,6BDoMe,SAACA,GAClC,IAAII,EAAuB,GAM3B,OALAA,GAAgB0F,EAAc,yBAA0B1F,EAAcJ,GACtEI,GAAgB0F,EAAc,mBAAoB1F,EAAcJ,GAChEI,GAAgB0F,EAAc,sBAAuB1F,EAAcJ,GAG9C,MAFrBI,GAAgB0F,EAAc,oBAAqB1F,EAAcJ,IAGxDI,EAEA,mBAAqBA,EAAe,IC7MhCsI,CAAoBzI,KAAKT,MAAMQ,KAElC,yBAAKA,GAAG,oBAAR,aAAsCC,KAAKT,MAAMQ,IACjD,yBACEA,GAAG,4BACHkC,UAC+B,cAA7BmB,EAAUpD,KAAKT,MAAMQ,IAAsB,aAAe,IAH9D,WAMWqD,EAAUpD,KAAKT,MAAMQ,KAGhC,yBACEkC,WDwKmB6B,ECvKA9D,KAAKT,MAAMuE,cDyKP,IAAjCA,EAAcC,QAAQiB,QACW,IAAjClB,EAAcE,QAAQgB,QACY,IAAlClB,EAAcG,SAASe,QACO,IAA9BlB,EAAcI,KAAKc,QACc,IAAjClB,EAAcK,QAAQa,QACY,IAAlClB,EAAcM,SAASY,OC9KkC,GAAK,gBAIrDrD,OAAO+G,KAAK1I,KAAKT,MAAMuE,eAAejC,IAAI,SAAAV,GACzC,MAAY,YAARA,GAA6B,YAARA,GAA6B,YAARA,EACrC,yBAAKA,IAAKA,GAAM,EAAKwH,cAAcxH,GAAK,IAExC,yBAAKA,IAAKA,GAAM,EAAKwH,cAAcxH,GAAK,MAGnD,6BAAMnB,KAAK4I,0BAIf,kBAAC,EAAD,CACE7I,GAAIC,KAAKT,MAAMQ,GACf+D,cAAe9D,KAAKT,MAAMuE,qB,GAtRZ5B,IAAMC,W,QCoBf0G,E,YAtCb,WAAYxJ,GAAa,IAAD,8BACtB,4CAAMA,KACDE,MAAQ,CACXuJ,UAAW,IAHS,E,0EAOXC,GACX/I,KAAKe,SAAS,CAAE+H,UAAWC,M,0CAI3B3I,IAAQ4I,WAAW,kBACnB5I,IAAQ6I,SAAS,e,+BAIjB,OACE,yBACEpK,MAAO,CAAEqK,gBAAiB,UAAWC,OAAQ,OAAQhK,MAAO,SAE5D,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAMM,GAAG,KACP,kBAAC,EAAD,OAEF,kBAAC,EAAD,MACA,kBAAC,IAAD,KAEE,kBAAC,IAAD,CAAO2J,KAAK,UAAUC,UAAWjK,IACjC,kBAAC,IAAD,CAAOgK,KAAK,aAAaC,UAAWpD,IACpC,kBAAC,IAAD,CAAOoD,UAAW,kBAAM,kBAAC,IAAD,CAAU5J,GAAG,gB,GA/B/ByC,IAAMC,WCFJmH,QACW,cAA7BC,OAAOrB,SAASsB,UAEe,UAA7BD,OAAOrB,SAASsB,UAEhBD,OAAOrB,SAASsB,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASlJ,SAASC,eAAe,SDmI3C,kBAAmBkJ,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC,iB","file":"static/js/main.f2226601.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/arrow.1cd80763.svg\";","module.exports = __webpack_public_path__ + \"static/media/logo.1740fffd.svg\";","import React from \"react\";\nimport \"./App.css\";\n\nconst Header: React.FC = () => {\n  return (\n    <div style={{ paddingTop: \"4rem\", textAlign: \"center\" }}>\n      <img\n        src={require(\"./images/logo.svg\")}\n        alt=\"Manto logo\"\n        style={{ width: \"20%\" }}\n      ></img>\n    </div>\n  );\n};\n\nexport default Header;\n","import React from \"react\";\nimport \"./App.css\";\nimport entities from \"./data/entities.json\";\nimport { Redirect } from \"react-router-dom\";\nimport arrow from \"./images/arrow.svg\";\nimport ReactGA from \"react-ga\";\n\ntype SearchProps = {};\ntype SearchState = {\n  redirect: boolean;\n  targetID: string;\n};\n\nclass Search extends React.Component<SearchProps, SearchState> {\n  constructor(props: any) {\n    super(props);\n    this.state = {\n      redirect: false,\n      targetID: \"\"\n    };\n    // this.onSearchSubmit = this.onSearchSubmit.bind(this);\n    this.handleSearch = this.handleSearch.bind(this);\n    this.handleSearchKeyDown = this.handleSearchKeyDown.bind(this);\n    this.getDescriptors = this.getDescriptors.bind(this);\n  }\n\n  getDescriptors(id: string) {\n    if (this.hasKey(entities, id)) {\n      let alternatives: string = \"\";\n      if (entities[id][\"Name (transliteration)\"] !== \"\") {\n        alternatives =\n          alternatives + \", \" + entities[id][\"Name (transliteration)\"];\n      }\n      if (entities[id][\"Name (Latinized)\"] !== \"\") {\n        alternatives = alternatives + \", \" + entities[id][\"Name (Latinized)\"];\n      }\n      if (entities[id][\"Name in Latin texts\"] !== \"\") {\n        alternatives =\n          alternatives + \", \" + entities[id][\"Name in Latin texts\"];\n      }\n      if (entities[id][\"Alternative names\"] !== \"\") {\n        alternatives = alternatives + \", \" + entities[id][\"Alternative names\"];\n      }\n      let inputText =\n        entities[id][\"Name (Smith & Trzaskoma)\"] +\n        alternatives +\n        \": \" +\n        entities[id][\"Identifying information\"];\n      return inputText;\n    }\n  }\n\n  pageRedirect = () => {\n    if (this.state.redirect) {\n      return <Redirect to={\"/datacards?id=\" + this.state.targetID} />;\n    }\n  };\n\n  handleSearch() {\n    ReactGA.event({\n      category: \"Search\",\n      action: \"User searched for an entity using the search bar\"\n    });\n    let currentInput = document.getElementById(\"input\") as HTMLInputElement;\n    if (currentInput.value !== \"\") {\n      //Search based on name and identifying information - super inefficient. TODO: fix this\n      for (let id in entities) {\n        if (this.hasKey(entities, id)) {\n          if (\n            entities[id][\"Identifying information\"] ===\n            currentInput.value.split(\": \")[1]\n          ) {\n            let currentInputName = currentInput.value\n              .split(\": \")[0]\n              .split(\",\")[0]\n              .trim();\n\n            if (\n              currentInputName === entities[id][\"Name (Smith & Trzaskoma)\"] ||\n              currentInputName === entities[id][\"Name (transliteration)\"] ||\n              currentInputName === entities[id][\"Name (Latinized)\"] ||\n              currentInputName === entities[id][\"Name in Latin texts\"] ||\n              currentInputName === entities[id][\"Alternative names\"]\n            ) {\n              this.setState({\n                redirect: true,\n                targetID: id\n              });\n            }\n          }\n        }\n      }\n    }\n  }\n\n  handleSearchKeyDown(event: any) {\n    if (event.which === 13 || event.keyCode === 13) {\n      this.handleSearch();\n    }\n  }\n\n  /* Addresses typescript indexing objects error */\n  hasKey<O>(obj: O, key: keyof any): key is keyof O {\n    return key in obj;\n  }\n\n  render() {\n    /* const entitiesArray = Object.values(entities).map(entity => {\n      return {\n        // what to show to the user\n        label: entity.ID + \": \" + this.getDescriptors(entity.ID),\n        // key to identify the item within the array\n        key: entity.ID\n      };\n    }); */\n    return (\n      <React.Fragment>\n        {/* <h3 style={{ textAlign: \"center\" }}>SEARCH</h3> */}\n        {this.pageRedirect()}\n        <div\n          style={{\n            margin: \"1rem 0 1rem 0\",\n            textAlign: \"center\"\n          }}\n        >\n          {/* <DataListInput\n          placeholder={\"Search by entity name...\"}\n          items={entitiesArray}\n          onSelect={this.pageRedirect}\n          match={this.matchCurrentInput}\n        /> */}\n          <input\n            // type=\"search\"\n            placeholder=\"Search by name\"\n            id=\"input\"\n            list=\"entities\"\n            onKeyDown={this.handleSearchKeyDown}\n            style={{ width: \"50%\", textAlign: \"center\", fontSize: \"1rem\" }}\n          ></input>\n          <datalist id=\"entities\" style={{ maxHeight: \"100px\" }}>\n            {Object.values(entities).map(entity => {\n              return (\n                <option\n                  value={this.getDescriptors(entity[\"\\ufeffID\"])}\n                ></option>\n              );\n            })}\n          </datalist>\n          <div>\n            <img\n              alt=\"Submit search\"\n              src={arrow}\n              onClick={this.handleSearch}\n              className=\"search-arrow\"\n            ></img>\n          </div>\n        </div>\n      </React.Fragment>\n    );\n  }\n}\n\nexport default Search;\n","import React from \"react\";\nimport \"./App.css\";\nimport { getGraph } from \"./GraphHandler\";\nimport entities from \"./data/entities.json\";\n\ntype GraphProps = { id: string; relationships: any };\ntype GraphState = {};\n\nclass EntityGraph extends React.Component<GraphProps, GraphState> {\n  constructor(props: any) {\n    super(props);\n  }\n\n  getName(id: string) {\n    return entities[id][\"Name (Smith & Trzaskoma)\"];\n  }\n\n  render() {\n    {\n      /* getGraph(2, this.props.id, this.props.relationships); */\n    }\n    return <div></div>;\n  }\n}\n\nexport default EntityGraph;\n","import ties from \"./data/ties.json\";\nimport entities from \"./data/entities.json\";\n\ntype passageInfo = {\n  start: string;\n  startID: string;\n  end: string;\n  endID: string;\n};\n\ntype entityInfo = {\n  target: string;\n  targetID: string;\n  passage: passageInfo[];\n  type: string;\n};\n\nexport type relationshipInfo = {\n  MOTHERS: entityInfo[];\n  FATHERS: entityInfo[];\n  SIBLINGS: entityInfo[];\n  TWIN: entityInfo[];\n  SPOUSES: entityInfo[];\n  CHILDREN: entityInfo[];\n};\n\nlet familyTies = [\n  /* Parent */\n  \"is father of\",\n  \"is mother of\",\n  \"is parent of\",\n  /* Child */\n  \"is child of\",\n  /* Sibling */\n  \"is sibling of\",\n  \"is twin of\",\n  \"is older than\",\n  /* Spouse */\n  \"is spouse of\",\n  \"marries\",\n  \"gives in marriage [dir. obj.] [ind. obj.]\",\n  /* Ancestors - currently unused\n  \"is grandfather of\",\n  \"is grandmother of\",\n  \"is grandparent of\",\n  \"is grandson of\",\n  \"is granddaughter of\",\n  \"is grandchild of\",\n  */\n\n  /* Member of collective */\n  \"is part of\",\n  \"is member of\"\n];\n\n/******************************************************************************************/\n/* Returns the data card geneology information, interfaces with DataCards.tsx                \n/******************************************************************************************/\nexport const updateComponent = (id: string) => {\n  let connections = getAllConnections(id);\n  return sortConnectionsIntoRelationships(id, connections);\n};\n\n/******************************************************************************************/\n/* Find all relationships                                                                 */\n/* -------------------------------------------------------------------------------------- */\n/* This function changes all ties (X <verb> Y, Y <verb> X, Z <verb> Y X) to Y <verb> X. */\n/******************************************************************************************/\nconst getAllConnections = (id: string) => {\n  var connections: {\n    target: string;\n    targetID: string;\n    verb: string;\n    passage: passageInfo[];\n  }[] = [];\n\n  Object.values(ties).forEach(function(tieRow) {\n    // TODO: Fix this temporary solution for entities not existing in entities.csv\n    if (entities[tieRow[\"Subject ID\"]]) {\n      /*********************************************************/\n      /* If you are the direct object X, e.g. (Y (verb) X)     */\n      /*********************************************************/\n      if (\n        tieRow[\"Direct Object ID\"] === id &&\n        familyTies.includes(tieRow.Verb)\n      ) {\n        let passageInfo: passageInfo[] = [\n          {\n            start: tieRow[\"Passage: start\"],\n            startID: tieRow[\"Passage: start ID\"],\n            end: tieRow[\"Passage: end\"] === \"\" ? \"\" : tieRow[\"Passage: end\"],\n            endID: tieRow[\"Passage: end ID\"]\n          }\n        ];\n\n        // TODO: Fix this temporary solution for gender data not existing for entity\n        if (getGender(tieRow[\"Subject ID\"]) && tieRow.Verb === \"marries\") {\n          if (getGender(tieRow[\"Subject ID\"]).gender === \"female\") {\n            tieRow.Verb = \"is wife of\";\n          } else if (getGender(tieRow[\"Subject ID\"]).gender === \"male\") {\n            tieRow.Verb = \"is husband of\";\n          }\n        }\n\n        // Push connections to the list of connections\n        connections.push({\n          target: entities[tieRow[\"Subject ID\"]][\"Name (Smith & Trzaskoma)\"],\n          targetID: tieRow[\"Subject ID\"],\n          verb: tieRow.Verb,\n          passage: passageInfo\n        });\n      }\n\n      /*********************************************************/\n      /* If you are the subject X, e.g. (X (verb) Y)           */\n      /*********************************************************/\n      if (tieRow[\"Subject ID\"] === id && familyTies.includes(tieRow.Verb)) {\n        let passageInfo: passageInfo[] = [\n          {\n            start: tieRow[\"Passage: start\"],\n            startID: tieRow[\"Passage: start ID\"],\n            end: tieRow[\"Passage: end\"] === \"\" ? \"\" : tieRow[\"Passage: end\"],\n            endID: tieRow[\"Passage: end ID\"]\n          }\n        ];\n\n        // Push connections to the list of connections\n        connections.push({\n          target:\n            entities[tieRow[\"Direct Object ID\"]][\"Name (Smith & Trzaskoma)\"],\n          targetID: tieRow[\"Direct Object ID\"],\n          verb: reversedVerb(tieRow.Verb, tieRow[\"Direct Object ID\"]),\n          passage: passageInfo\n        });\n      }\n\n      /*********************************************************/\n      /* If you are the indirect object X, e.g. (Z (verb) Y X)\n    /*********************************************************/\n\n      // TODO: Fix this for using Indirect Object ID not name\n      if (\n        tieRow[\"Indirect Object (to/for)\"] === id &&\n        familyTies.includes(tieRow.Verb)\n      ) {\n        let passageInfo: passageInfo[] = [\n          {\n            start: tieRow[\"Passage: start\"],\n            startID: tieRow[\"Passage: start ID\"],\n            end: tieRow[\"Passage: end\"] === \"\" ? \"\" : tieRow[\"Passage: end\"],\n            endID: tieRow[\"Passage: end ID\"]\n          }\n        ];\n        connections.push({\n          target:\n            entities[tieRow[\"Direct Object ID\"]][\"Name (Smith & Trzaskoma)\"],\n          targetID: tieRow[\"Direct Object ID\"],\n          verb: reversedVerb(tieRow.Verb, tieRow[\"Direct Object ID\"]),\n          passage: passageInfo\n        });\n      }\n    }\n  });\n  return connections;\n};\n\n/******************************************************************************************/\n/* Sort relationships                                                                     */\n/* -------------------------------------------------------------------------------------- */\n/* This function sorts all of the found connections into existing geneological categories */\n/******************************************************************************************/\nconst sortConnectionsIntoRelationships = (id: string, connections: any) => {\n  /* Preliminary info about the entity */\n  let name = entities[id][\"Name (Smith & Trzaskoma)\"];\n  let type = entities[id][\"Type of entity\"];\n  let members: any[] = [];\n  let relationships: relationshipInfo = {\n    MOTHERS: [],\n    FATHERS: [],\n    SIBLINGS: [],\n    TWIN: [],\n    SPOUSES: [],\n    CHILDREN: []\n  };\n\n  connections.forEach(tie => {\n    // For each of the connections already found,\n    // build the associated entity object, and\n    // populate with existing information\n    let d: entityInfo = {\n      target: tie.target,\n      targetID: tie.targetID,\n      passage: tie.passage,\n      type: entities[tie.targetID][\"Type of entity\"]\n    };\n\n    /* Categorising the connections, also checking for duplicates */\n\n    // X is your MOTHER\n    if (tie.verb === \"is mother of\") {\n      // If passage is a duplicate / already exists\n      // for this entity, or  in the list of connections\n      relationships.MOTHERS = checkAndRemoveDuplicates(\n        relationships.MOTHERS,\n        d\n      );\n    }\n\n    // X is your FATHER\n    else if (tie.verb === \"is father of\") {\n      relationships.FATHERS = checkAndRemoveDuplicates(\n        relationships.FATHERS,\n        d\n      );\n    }\n\n    // X is your CHILD\n    else if (\n      tie.verb === \"is son of\" ||\n      tie.verb === \"is daughter of\" ||\n      tie.verb === \"is child of\"\n    ) {\n      relationships.CHILDREN = checkAndRemoveDuplicates(\n        relationships.CHILDREN,\n        d\n      );\n    }\n\n    // X is your SIBLING\n    else if (\n      tie.verb === \"is sister of\" ||\n      tie.verb === \"is brother of\" ||\n      tie.verb === \"is older than\"\n    ) {\n      relationships.SIBLINGS = checkAndRemoveDuplicates(\n        relationships.SIBLINGS,\n        d\n      );\n    }\n\n    // X is your TWIN\n    else if (tie.verb === \"is twin of\") {\n      relationships.TWIN = checkAndRemoveDuplicates(relationships.TWIN, d);\n    }\n    // X is your WIFE / HUSBAND\n    else if (tie.verb === \"is spouse of\" || tie.verb === \"marries\") {\n      relationships.SPOUSES = checkAndRemoveDuplicates(\n        relationships.SPOUSES,\n        d\n      );\n    }\n    // X is a MEMBER of a collective\n    else if (tie.verb === \"is part of\") {\n      members = checkAndRemoveDuplicates(members, d);\n    }\n  });\n\n  /* TODO: Check for any indirect siblings in the ties */\n  relationships.SIBLINGS = getIndirectSiblings(\n    relationships.MOTHERS,\n    relationships.FATHERS,\n    relationships.SIBLINGS\n  );\n\n  /* Alphabetize the relationships */\n  relationships.MOTHERS = alphabetize(relationships.MOTHERS);\n  relationships.FATHERS = alphabetize(relationships.FATHERS);\n  relationships.SIBLINGS = alphabetize(relationships.SIBLINGS);\n  relationships.TWIN = alphabetize(relationships.TWIN);\n  relationships.SPOUSES = alphabetize(relationships.SPOUSES);\n  relationships.CHILDREN = alphabetize(relationships.CHILDREN);\n  members = alphabetize(members);\n\n  /* Return alphabetized, complete list of relationships */\n  return {\n    id: id,\n    relationships: relationships,\n    name: name,\n    members: members,\n    type: type,\n    validSearch: true\n  };\n};\n\n/******************************************************************************************/\n/* Check passage and entity duplicates                                                    */\n/* -------------------------------------------------------------------------------------- */\n/* This function removes duplicate ties (incl. after reversal) and duplicate passages   */\n/* for the same connected entity                                                          */\n/******************************************************************************************/\nconst checkAndRemoveDuplicates = (entities: any[], d: entityInfo) => {\n  let entityDuplicate = false;\n  entities.forEach(e => {\n    if (e.targetID === d.targetID) {\n      entityDuplicate = true;\n      let passageDuplicate = false;\n      e.passage.forEach(p => {\n        if (\n          p.startID === d.passage[0].startID &&\n          p.endID === d.passage[0].endID\n        ) {\n          passageDuplicate = true;\n        }\n      });\n      if (!passageDuplicate) {\n        e.passage.push(d.passage[0]);\n      }\n    }\n  });\n  if (!entityDuplicate) {\n    entities.push(d);\n  }\n  return entities;\n};\n\n/******************************************************************************************/\n/* Alphabetize the list of names in each category                                         */\n/******************************************************************************************/\nconst alphabetize = (relation: any[]) => {\n  if (relation.length === 0) {\n    return [];\n  } else {\n    relation.sort(function(a, b) {\n      var relationA = a.target.toUpperCase();\n      var relationB = b.target.toUpperCase();\n      return relationA < relationB ? -1 : relationA > relationB ? 1 : 0;\n    });\n  }\n  return relation;\n};\n\n/******* */\nexport const getGender = (id: string) => {\n  return entities[id][\"Agent/Coll.: gender\"];\n};\n\n/******************************************************************************************/\n/* Tie reversals                                                   */\n/* -------------------------------------------------------------------------------------- */\n/* This function flips the verb so that X can become the direct object,                   */\n/* without compromising the validity of the tie                                         */\n/*                                                                                        */\n/* e.g. X <is mother of> Y, where Y is <male>                                             */\n/* => returns verb <is son of>, to let X become the direct object (Y is son of X)         */\n/******************************************************************************************/\nconst reversedVerb = (verb: string, dirObject: string) => {\n  // TODO: Fix this temporary solution for gender data not existing for entity\n  // PARENT -> CHILD\n  if (\n    verb === \"is mother of\" ||\n    verb === \"is father of\" ||\n    verb === \"is parent of\"\n  ) {\n    // Uses generic \"is child of\" since data cards do not show gender specificity for children\n    return \"is child of\";\n  }\n\n  // CHILD -> PARENT\n  else if (\n    verb === \"is son of\" ||\n    verb === \"is daughter of\" ||\n    verb === \"is child of\"\n  ) {\n    if (getGender(dirObject) === \"Female\") {\n      return \"is mother of\";\n    } else if (getGender(dirObject) === \"Male\") {\n      return \"is father of\";\n    } else {\n      // Placeholder since \"is parent of\" is not currently used in data cards\n      return \"\";\n    }\n  }\n\n  // TWIN -> TWIN\n  else if (verb === \"is twin of\") {\n    return \"is twin of\";\n  }\n\n  // SIBLING -> SIBLING\n  else if (\n    verb === \"is sister of\" ||\n    verb === \"is brother of\" ||\n    verb === \"is older than\"\n  ) {\n    if (getGender(dirObject) === \"Female\") {\n      return \"is sister of\";\n    } else if (getGender(dirObject) === \"Male\") {\n      return \"is brother of\";\n    } else {\n      // Placeholder since gender-unspecified siblings (e.g. \"is sibling of\")\n      // does not exist in ties.csv\n      return \"\";\n    }\n  }\n\n  // WIFE -> HUSBAND\n  // HUSBAND -> WIFE\n  // No cases of homosexual relationships in the mythology\n  else if (\n    verb === \"is wife of\" ||\n    verb === \"is husband of\" ||\n    verb === \"marries\"\n  ) {\n    if (getGender(dirObject) === \"Female\") {\n      return \"is wife of\";\n    } else if (getGender(dirObject) === \"Male\") {\n      return \"is husband of\";\n    } else {\n      // Placeholder since \"marries\" is not currently used in data cards\n      return \"marries\";\n    }\n  }\n\n  // TODO: Deal with IS MEMBER OF verb here.\n  else {\n    console.log(\n      \"Unsure of the \" +\n        verb +\n        \" \" +\n        dirObject +\n        \" connection, or connection is not relevant for the datacards.\",\n      verb,\n      dirObject\n    );\n    return \"\";\n  }\n};\n\n/******************************************************************************************/\n/* Populate an array of siblings based on matching parents                                */\n/* -------------------------------------------------------------------------------------- */\n/* This function checks through the list of ties and pushes to the list of siblings:    */\n/*                                                                                        */\n/* e.g. X is <child> of A, X is <child> of B, Y is <child> of A, Y is <child> of B        */\n/******************************************************************************************/\nconst getIndirectSiblings = (\n  mothers: any[],\n  fathers: any[],\n  siblings: any[]\n) => {\n  /* let potentialsiblings: {id: string, mother: string, father: string};\n  Object.values(tie).forEach(function(tieRow) {\n    let s: potentialsiblings = [];\n    // Firstly, determine where Y is <child> of A,B\n    if ((tieRow.Verb === \"is daughter of\" || tieRow.Verb === \"is son of\" || tieRow.Verb === \"is child of\")) {\n      mothers.forEach(e => {\n        if (e.targetId === tieRow[\"Direct Object ID\"]) {\n          s.mother.push(targetId);\n        }\n      });\n    }\n    \n\n  }; */\n\n  return siblings;\n};\n\n/******************************************************************************************/\n/* Check if no relations exist for this entity (used in DataCards.tsx)                    */\n/******************************************************************************************/\nexport const checkNoRelations = (relationships: any) => {\n  return (\n    relationships.MOTHERS.length === 0 &&\n    relationships.FATHERS.length === 0 &&\n    relationships.SIBLINGS.length === 0 &&\n    relationships.TWIN.length === 0 &&\n    relationships.SPOUSES.length === 0 &&\n    relationships.CHILDREN.length === 0\n  );\n};\n\n/******************************************************************************************/\n/* Return all alternative names for entity (used in DataCards.tsx)                        */\n/******************************************************************************************/\nexport const getAlternativeNames = (id: string) => {\n  let alternatives: string = \"\";\n  alternatives += getNameString(\"Name (transliteration)\", alternatives, id);\n  alternatives += getNameString(\"Name (Latinized)\", alternatives, id);\n  alternatives += getNameString(\"Name in Latin texts\", alternatives, id);\n  alternatives += getNameString(\"Alternative names\", alternatives, id);\n\n  if (alternatives === \"\") {\n    return alternatives;\n  } else {\n    return \"(Also known as: \" + alternatives + \")\";\n  }\n};\n\nconst getNameString = (parameter: string, stringSoFar: string, id: string) => {\n  let s = \"\";\n  if (entities[id][parameter] !== \"\") {\n    if (stringSoFar === \"\") {\n      s = entities[id][parameter];\n    } else {\n      s = stringSoFar + \", \" + entities[id][parameter];\n    }\n  }\n  return s;\n};\n","import React from \"react\";\nimport \"./App.css\";\nimport \"./DataCards.scss\";\nimport queryString from \"querystring\";\nimport passages from \"./data/passages.json\";\nimport EntityGraph from \"./EntityGraph\";\nimport ReactGA from \"react-ga\";\nimport {\n  relationshipInfo,\n  updateComponent,\n  checkNoRelations,\n  getAlternativeNames,\n  getGender\n} from \"./DataCardHandler\";\nimport Pluralize from \"pluralize\";\n\ntype DatumProps = {\n  location: {\n    search: string;\n  };\n  history: {\n    push: ({}) => null;\n  };\n};\ntype DatumState = {\n  id: string;\n  name: string;\n  relationships: relationshipInfo;\n  members: any[];\n  type: string;\n  validSearch: boolean;\n};\n\nclass DataCards extends React.Component<DatumProps, DatumState> {\n  constructor(props: any) {\n    super(props);\n    // Dionysus is 8188175, use to test multiple names\n    // Atreus is 8187873\n    // Theseus is 8188822\n    // Agamemnon is 8182035\n    // Use Clytaimnestra example, 8188055\n    this.state = {\n      id: \"8182035\", // placeholder\n      name: \"\",\n      relationships: {\n        MOTHERS: [],\n        FATHERS: [],\n        SIBLINGS: [],\n        TWIN: [],\n        SPOUSES: [],\n        CHILDREN: []\n      },\n      members: [],\n      type: \"\",\n      validSearch: false\n    };\n    /* this.getNameFromID = this.getNameFromID.bind(this);\n    this.checkNoRelations = this.checkNoRelations.bind(this);\n    this.reversedVerb = this.reversedVerb.bind(this);\n    this.getDataPoints = this.getDataPoints.bind(this);\n    this.handleNameClicked = this.handleNameClicked.bind(this);\n    this.getAlternativeNames = this.getAlternativeNames.bind(this); */\n  }\n\n  /*******************/\n  /* HELPER FUNCTIONS */\n  /*******************/\n\n  getPassageLink(passage: any) {\n    let id = passage.startID;\n    let author: string = passages[id].Author;\n    let title: string = passages[id].Title;\n    let start: string = passages[id].Passage;\n    let end: string = passage.endID;\n\n    // Dealing with multiple URNs\n    let URN: string = \"\";\n    let URNsplit = passages[id][\"CTS URN\"].split(\", \");\n    if (URNsplit.length >= 2) {\n      URN = URNsplit[1];\n    } else {\n      URN = passages[id][\"CTS URN\"];\n    }\n\n    URN = \"https://scaife.perseus.org/reader/\" + URN;\n    if (passage.endID !== \"\") {\n      end = passages[end].Passage;\n      URN = URN + \"-\" + end;\n    }\n    URN = URN + \"/?right=perseus-eng2\";\n\n    return (\n      <span>\n        {\"  (\"}\n        <a\n          target=\"_blank\"\n          rel=\"noopener noreferrer\"\n          href={URN}\n          style={{\n            color: \"grey\",\n            fontSize: \"0.8rem\"\n          }}\n        >\n          {author + \", \"}\n          <span style={{ fontStyle: \"italic\" }}>{title}</span> {start}\n          {start !== end && end !== \"\" ? \"-\" + end : \"\"}\n        </a>\n        {\")\"}\n      </span>\n    );\n  }\n\n  handleNameClicked(targetID: string) {\n    ReactGA.event({\n      category: \"NameClicked\",\n      action: \"User clicked on a name within the data card\"\n    });\n    this.props.history.push(\"/datacards?id=\" + targetID);\n  }\n\n  getDataPoints(relationship: string, showPassage: boolean) {\n    let that = this;\n    if (that.state.relationships[relationship].length !== 0) {\n      return (\n        <div style={{ clear: \"both\" }}>\n          <div\n            style={{\n              fontWeight: \"bold\",\n              textTransform: \"uppercase\",\n              float: \"left\",\n              paddingRight: \"1rem\"\n            }}\n          >\n            {this.state.relationships[relationship].length === 1 &&\n            this.state.relationships[relationship][0].type !== \"Collective\"\n              ? Pluralize.singular(relationship) + \": \"\n              : relationship + \": \"}\n          </div>\n          <div style={{ float: \"left\" }}>\n            {that.state.relationships[relationship].map(entity => {\n              return (\n                <div style={{ margin: \"0\" }}>\n                  <div\n                    className=\"entity-button\"\n                    onClick={() => this.handleNameClicked(entity.targetID)}\n                  >\n                    {entity !== that.state.relationships[relationship][0] ? (\n                      <span>OR </span>\n                    ) : (\n                      \"\"\n                    )}\n                    <span style={{ textDecoration: \"underline\" }}>\n                      {entity.target}\n                    </span>\n                  </div>\n                  {showPassage\n                    ? entity.passage.map(passage => {\n                        return this.getPassageLink(passage);\n                      })\n                    : \"\"}\n                </div>\n              );\n            })}\n          </div>\n        </div>\n      );\n    } else {\n      return null;\n    }\n  }\n\n  getCollectiveMembers() {\n    let that = this;\n    if (that.state.members.length !== 0) {\n      return (\n        <div style={{ marginTop: \"3rem\", textAlign: \"center\" }}>\n          <div\n            style={{\n              fontWeight: \"bold\",\n              textTransform: \"uppercase\",\n              textDecoration: \"underline\",\n              marginBottom: \"0.5rem\"\n            }}\n          >\n            MEMBERS:\n          </div>\n          {that.state.members.map(member => {\n            return (\n              <div style={{ margin: \"0\" }}>\n                <span\n                  className=\"collective-button\"\n                  onClick={() => this.handleNameClicked(member.targetID)}\n                >\n                  {member.target}\n                </span>\n                {member.passage.map(passage => {\n                  return this.getPassageLink(passage);\n                })}\n              </div>\n            );\n          })}\n        </div>\n      );\n    } else {\n      return null;\n    }\n  }\n\n  /*******************/\n  /* SETUP FUNCTIONS */\n  /*******************/\n\n  componentDidMount() {\n    const params = queryString.parse(this.props.location.search.slice(1));\n    const id = params.id as string;\n    if (!params.id) {\n      // Handle bad url\n      //@ts-ignore\n      this.setState({ validSearch: false });\n    } else {\n      //Substitute with ID\n      // this.updateComponent(this.state.id);\n      let newState = updateComponent(id);\n      this.setState({\n        id: newState.id,\n        relationships: newState.relationships,\n        members: newState.members,\n        name: newState.name,\n        type: newState.type,\n        validSearch: newState.validSearch\n      });\n    }\n  }\n\n  componentDidUpdate() {\n    const params = queryString.parse(this.props.location.search.slice(1));\n    const id = params.id as string;\n    if (!params.id) {\n      // Handle bad url\n      //@ts-ignore\n      this.setState({ validSearch: false });\n    } else if (this.state.id !== id) {\n      //Substitute with ID\n      // this.updateComponent(this.state.id);\n      let newState = updateComponent(id);\n      this.setState({\n        id: newState.id,\n        relationships: newState.relationships,\n        members: newState.members,\n        name: newState.name,\n        type: newState.type,\n        validSearch: newState.validSearch\n      });\n    }\n  }\n\n  /*************/\n  /* RENDERING */\n  /*************/\n\n  render() {\n    return (\n      <React.Fragment>\n        <div\n          className={this.state.validSearch ? \"no-display\" : \"\"}\n          style={{ textAlign: \"center\", padding: \"3rem\" }}\n        >\n          No profiles have been selected. Try using the Search function.\n        </div>\n        <div className={this.state.validSearch ? \"\" : \"no-display\"}>\n          <div\n            style={{\n              margin: \"1rem 6rem 3rem 6rem\",\n              padding: \"3rem\",\n              display: \"flow-root\",\n              border: \"solid 1px black\"\n            }}\n          >\n            <div id=\"datacard-heading\">{this.state.name}</div>\n            <div id=\"datacard-alternativenames\">\n              {getAlternativeNames(this.state.id)}\n            </div>\n            <div id=\"datacard-mantoID\">MANTO ID: {this.state.id}</div>\n            <div\n              id=\"datacard-alternativenames\"\n              className={\n                getGender(this.state.id) === \"undefined\" ? \"no-display\" : \"\"\n              }\n            >\n              Gender: {getGender(this.state.id)}\n            </div>\n            {/* If no data is available for the subject */}\n            <div\n              className={\n                checkNoRelations(this.state.relationships) ? \"\" : \"no-display\"\n              }\n            ></div>\n            {/* If data is available for the subject */}\n            {Object.keys(this.state.relationships).map(key => {\n              if (key === \"MOTHERS\" || key === \"FATHERS\" || key === \"SPOUSES\") {\n                return <div key={key}>{this.getDataPoints(key, true)}</div>;\n              } else {\n                return <div key={key}>{this.getDataPoints(key, false)}</div>;\n              }\n            })}\n            <div>{this.getCollectiveMembers()}</div>\n          </div>\n        </div>\n\n        <EntityGraph\n          id={this.state.id}\n          relationships={this.state.relationships}\n        ></EntityGraph>\n      </React.Fragment>\n    );\n  }\n}\n\nexport default DataCards;\n","import React from \"react\";\nimport \"./App.css\";\nimport Header from \"./Header\";\nimport Search from \"./Search\";\nimport DataCards from \"./DataCards\";\nimport ReactGA from \"react-ga\";\nimport {\n  HashRouter as Router,\n  Route,\n  Link,\n  Switch,\n  Redirect\n} from \"react-router-dom\";\n\nclass App extends React.Component<{}, {}> {\n  constructor(props: any) {\n    super(props);\n    this.state = {\n      subjectID: \"\"\n    };\n  }\n\n  changeEntity(ID: string) {\n    this.setState({ subjectID: ID });\n  }\n\n  initializeReactGA() {\n    ReactGA.initialize(\"UA-151993194-1\");\n    ReactGA.pageview(\"/homepage\");\n  }\n\n  render() {\n    return (\n      <div\n        style={{ backgroundColor: \"#eeeeee\", height: \"100%\", width: \"100%\" }}\n      >\n        <Router>\n          <Link to=\"/\">\n            <Header></Header>\n          </Link>\n          <Search></Search>\n          <Switch>\n            {/* <Route exact path=\"/\" component={Home} /> */}\n            <Route path=\"/search\" component={Search} />\n            <Route path=\"/datacards\" component={DataCards} />\n            <Route component={() => <Redirect to=\"/\" />} />\n          </Switch>\n        </Router>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}