{"version":3,"sources":["images/arrow.svg","images/logo.svg","Header.tsx","Search.tsx","DataCardHandler.ts","DataCards.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["module","exports","Header","style","paddingTop","textAlign","src","require","alt","width","Search","props","pageRedirect","state","redirect","to","targetID","handleSearch","bind","handleSearchKeyDown","getDescriptors","id","this","hasKey","entities","alternatives","ReactGA","event","category","action","currentInput","document","getElementById","value","split","currentInputName","trim","console","log","setState","which","keyCode","obj","key","Fragment","margin","placeholder","list","onKeyDown","fontSize","maxHeight","Object","values","map","entity","arrow","onClick","className","React","Component","familyDatums","updateComponent","name","getNameFromID","connections","datum","forEach","datumRow","includes","Verb","passageInfo","start","startID","end","endID","push","target","verb","passage","reversedVerb","relationships","MOTHERS","FATHERS","SIBLINGS","WIVES","HUSBANDS","CHILDREN","d","wasDuplicate","mother","father","children","siblings","wives","husbands","genderData","gender","fathers","alphabetize","validSearch","relation","length","sort","a","b","relationA","toUpperCase","relationB","dirObject","DataCards","author","passages","Author","title","Title","Passage","URN","URNsplit","rel","href","color","fontStyle","history","relationship","clear","fontWeight","textTransform","float","paddingRight","Pluralize","singular","handleNameClicked","getPassageLink","params","queryString","parse","location","search","slice","newState","padding","display","border","getAlternativeNames","keys","getDataPoints","App","subjectID","ID","initialize","pageview","backgroundColor","height","path","component","Boolean","window","hostname","match","ReactDOM","render","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.f4a51b75.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/arrow.1cd80763.svg\";","module.exports = __webpack_public_path__ + \"static/media/logo.1740fffd.svg\";","import React from \"react\";\nimport \"./App.css\";\n\nconst Header: React.FC = () => {\n  return (\n    <div style={{ paddingTop: \"4rem\", textAlign: \"center\" }}>\n      <img\n        src={require(\"./images/logo.svg\")}\n        alt=\"Manto logo\"\n        style={{ width: \"20%\" }}\n      ></img>\n    </div>\n  );\n};\n\nexport default Header;\n","import React from \"react\";\nimport \"./App.css\";\nimport entities from \"./data/entities.json\";\nimport { Redirect } from \"react-router-dom\";\nimport arrow from \"./images/arrow.svg\";\nimport ReactGA from \"react-ga\";\n\ntype SearchProps = {};\ntype SearchState = {\n  redirect: boolean;\n  targetID: string;\n};\n\nclass Search extends React.Component<SearchProps, SearchState> {\n  constructor(props: any) {\n    super(props);\n    this.state = {\n      redirect: false,\n      targetID: \"\"\n    };\n    // this.onSearchSubmit = this.onSearchSubmit.bind(this);\n    this.handleSearch = this.handleSearch.bind(this);\n    this.handleSearchKeyDown = this.handleSearchKeyDown.bind(this);\n    this.getDescriptors = this.getDescriptors.bind(this);\n  }\n\n  getDescriptors(id: string) {\n    if (this.hasKey(entities, id)) {\n      let alternatives: string = \"\";\n      if (entities[id][\"Name (transliteration)\"] !== \"\") {\n        alternatives =\n          alternatives + \", \" + entities[id][\"Name (transliteration)\"];\n      }\n      if (entities[id][\"Name (Latinized)\"] !== \"\") {\n        alternatives = alternatives + \", \" + entities[id][\"Name (Latinized)\"];\n      }\n      if (entities[id][\"Name in Latin texts\"] !== \"\") {\n        alternatives =\n          alternatives + \", \" + entities[id][\"Name in Latin texts\"];\n      }\n      if (entities[id][\"Alternative names\"] !== \"\") {\n        alternatives = alternatives + \", \" + entities[id][\"Alternative names\"];\n      }\n      let inputText =\n        entities[id][\"Name (Smith & Trzaskoma)\"] +\n        alternatives +\n        \": \" +\n        entities[id][\"Identifying information\"];\n      return inputText;\n    }\n  }\n\n  pageRedirect = () => {\n    if (this.state.redirect) {\n      return <Redirect to={\"/datacards?id=\" + this.state.targetID} />;\n    }\n  };\n\n  handleSearch() {\n    ReactGA.event({\n      category: \"Search\",\n      action: \"User searched for an entity using the search bar\"\n    });\n    let currentInput = document.getElementById(\"input\") as HTMLInputElement;\n    if (currentInput.value !== \"\") {\n      //Search based on name and identifying information - super inefficient. TODO: fix this\n      for (let id in entities) {\n        if (this.hasKey(entities, id)) {\n          if (\n            entities[id][\"Identifying information\"] ===\n            currentInput.value.split(\": \")[1]\n          ) {\n            let currentInputName = currentInput.value\n              .split(\": \")[0]\n              .split(\",\")[0]\n              .trim();\n            console.log(currentInputName);\n\n            if (\n              currentInputName === entities[id][\"Name (Smith & Trzaskoma)\"] ||\n              currentInputName === entities[id][\"Name (transliteration)\"] ||\n              currentInputName === entities[id][\"Name (Latinized)\"] ||\n              currentInputName === entities[id][\"Name in Latin texts\"] ||\n              currentInputName === entities[id][\"Alternative names\"]\n            ) {\n              this.setState({\n                redirect: true,\n                targetID: id\n              });\n            }\n          }\n        }\n      }\n    }\n  }\n\n  handleSearchKeyDown(event: any) {\n    if (event.which === 13 || event.keyCode === 13) {\n      this.handleSearch();\n    }\n  }\n\n  /* Addresses typescript indexing objects error */\n  hasKey<O>(obj: O, key: keyof any): key is keyof O {\n    return key in obj;\n  }\n\n  render() {\n    /* const entitiesArray = Object.values(entities).map(entity => {\n      return {\n        // what to show to the user\n        label: entity.ID + \": \" + this.getDescriptors(entity.ID),\n        // key to identify the item within the array\n        key: entity.ID\n      };\n    }); */\n    return (\n      <React.Fragment>\n        {/* <h3 style={{ textAlign: \"center\" }}>SEARCH</h3> */}\n        {this.pageRedirect()}\n        <div\n          style={{\n            margin: \"1rem 0 1rem 0\",\n            textAlign: \"center\"\n          }}\n        >\n          {/* <DataListInput\n          placeholder={\"Search by entity name...\"}\n          items={entitiesArray}\n          onSelect={this.pageRedirect}\n          match={this.matchCurrentInput}\n        /> */}\n          <input\n            // type=\"search\"\n            placeholder=\"Search by name\"\n            id=\"input\"\n            list=\"entities\"\n            onKeyDown={this.handleSearchKeyDown}\n            style={{ width: \"50%\", textAlign: \"center\", fontSize: \"1rem\" }}\n          ></input>\n          <datalist id=\"entities\" style={{ maxHeight: \"100px\" }}>\n            {Object.values(entities).map(entity => {\n              return (\n                <option\n                  value={this.getDescriptors(entity[\"\\ufeffID\"])}\n                ></option>\n              );\n            })}\n          </datalist>\n          <div>\n            <img\n              alt=\"Submit search\"\n              src={arrow}\n              onClick={this.handleSearch}\n              className=\"search-arrow\"\n            ></img>\n          </div>\n        </div>\n      </React.Fragment>\n    );\n  }\n}\n\nexport default Search;\n","import datum from \"./data/datum.json\";\nimport entities from \"./data/entities.json\";\nimport genderData from \"./data/genderData.json\";\n\n/* Addresses typescript indexing objects error */\n/* const hasKey<O>(obj: O, key: keyof any): key is keyof O => {{\n  return key in obj;\n}}*/\n\nexport type relationshipInfo = {\n  MOTHERS: entityInfo[];\n  FATHERS: entityInfo[];\n  SIBLINGS: entityInfo[];\n  WIVES: entityInfo[];\n  HUSBANDS: entityInfo[];\n  CHILDREN: entityInfo[];\n};\n\ntype passageInfo = {\n  start: string;\n  startID: string;\n  end: string;\n  endID: string;\n};\ntype entityInfo = {\n  target: string;\n  targetID: string;\n  passage: passageInfo[];\n};\n\n/* TODO:\nGet gender from subject ID\n*/\n\nlet familyDatums = [\n  \"is father of\",\n  \"is mother of\",\n  \"is parent of\",\n  \"is child of\",\n  \"is son of\",\n  \"is daughter of\",\n  \"is sister of\",\n  \"is brother of\",\n  \"is twin of\",\n  \"is wife of\",\n  \"is husband of\",\n  \"marries\",\n  \"is grandfather of\",\n  \"is grandmother of\",\n  \"is grandparent of\",\n  \"is grandson of\",\n  \"is granddaughter of\",\n  \"is grandchild of\"\n];\n\n/***************************\n * HELPER FUNCTIONS\n ***************************/\n\nexport const updateComponent = (id: string) => {\n  /* Preliminary information (i.e. name) about the entity */\n  let name = getNameFromID(id);\n\n  /*******************/\n  /* Find all relationships */\n  /*******************/\n\n  var connections: {\n    target: string;\n    targetID: string;\n    verb: string;\n    passage: passageInfo[];\n  }[] = [];\n\n  // Populate \"connections\" array with all family connections\n  Object.values(datum).forEach(function(datumRow) {\n    if (\n      datumRow[\"Direct Object ID\"] === id &&\n      familyDatums.includes(datumRow.Verb)\n    ) {\n      // i.e. X <verb> Y where Y is your name\n      let passageInfo: passageInfo[] = [\n        {\n          start: datumRow[\"Passage: start\"],\n          startID: datumRow[\"Passage: start ID\"],\n          end: datumRow[\"Passage: end\"] === \"\" ? \"\" : datumRow[\"Passage: end\"],\n          endID: datumRow[\"Passage: end ID\"]\n        }\n      ];\n      connections.push({\n        target: entities[datumRow[\"Subject ID\"]][\"Name (Smith & Trzaskoma)\"],\n        targetID: datumRow[\"Subject ID\"],\n        verb: datumRow.Verb,\n        passage: passageInfo\n      });\n    }\n    if (datumRow[\"Subject ID\"] === id && familyDatums.includes(datumRow.Verb)) {\n      // Add the logic reversals here\n      // i.e. Y <verb> X where Y is your name\n      let passageInfo: passageInfo[] = [\n        {\n          start: datumRow[\"Passage: start\"],\n          startID: datumRow[\"Passage: start ID\"],\n          end: datumRow[\"Passage: end\"] === \"\" ? \"\" : datumRow[\"Passage: end\"],\n          endID: datumRow[\"Passage: end ID\"]\n        }\n      ];\n      connections.push({\n        target:\n          entities[datumRow[\"Direct Object ID\"]][\"Name (Smith & Trzaskoma)\"],\n        targetID: datumRow[\"Direct Object ID\"],\n        verb: reversedVerb(datumRow.Verb, datumRow[\"Direct Object ID\"]),\n        passage: passageInfo\n      });\n    }\n  });\n\n  // Sort family relationships into their relevant relationship state categories\n  //TODO: deal with duplicates\n  let relationships: relationshipInfo = {\n    MOTHERS: [],\n    FATHERS: [],\n    SIBLINGS: [],\n    WIVES: [],\n    HUSBANDS: [],\n    CHILDREN: []\n  };\n  connections.forEach(datum => {\n    console.log(datum.target);\n    let d: entityInfo = {\n      target: datum.target,\n      targetID: datum.targetID,\n      passage: datum.passage\n    };\n\n    //Assign thenm to their relevant categories\n    if (datum.verb === \"is mother of\") {\n      // Address duplicates: same person, different passages\n      let wasDuplicate = false;\n      relationships.MOTHERS.forEach(mother => {\n        if (mother.targetID === d.targetID) {\n          mother.passage.push(d.passage[0]);\n          wasDuplicate = true;\n        }\n      });\n      if (!wasDuplicate) {\n        relationships.MOTHERS.push(d);\n      }\n    } else if (datum.verb === \"is father of\") {\n      // Address duplicates: same person, different passages\n      let wasDuplicate = false;\n      relationships.FATHERS.forEach(father => {\n        if (father.targetID === d.targetID) {\n          father.passage.push(d.passage[0]);\n          wasDuplicate = true;\n        }\n      });\n      if (!wasDuplicate) {\n        relationships.FATHERS.push(d);\n      }\n    } else if (\n      datum.verb === \"is son of\" ||\n      datum.verb === \"is daughter of\" ||\n      datum.verb === \"is child of\"\n    ) {\n      let wasDuplicate = false;\n      relationships.CHILDREN.forEach(children => {\n        if (children.targetID === d.targetID) {\n          children.passage.push(d.passage[0]);\n          wasDuplicate = true;\n        }\n      });\n      if (!wasDuplicate) {\n        relationships.CHILDREN.push(d);\n      }\n    } else if (\n      datum.verb === \"is sister of\" ||\n      datum.verb === \"is brother of\" ||\n      datum.verb === \"is twin of\"\n    ) {\n      let wasDuplicate = false;\n      relationships.SIBLINGS.forEach(siblings => {\n        if (siblings.targetID === d.targetID) {\n          siblings.passage.push(d.passage[0]);\n          wasDuplicate = true;\n        }\n      });\n      if (!wasDuplicate) {\n        relationships.SIBLINGS.push(d);\n      }\n    } else if (datum.verb === \"is wife of\") {\n      let wasDuplicate = false;\n      relationships.WIVES.forEach(wives => {\n        if (wives.targetID === d.targetID) {\n          wives.passage.push(d.passage[0]);\n          wasDuplicate = true;\n        }\n      });\n      if (!wasDuplicate) {\n        relationships.WIVES.push(d);\n      }\n    } else if (datum.verb === \"is husband of\") {\n      let wasDuplicate = false;\n      relationships.HUSBANDS.forEach(husbands => {\n        if (husbands.targetID === d.targetID) {\n          husbands.passage.push(d.passage[0]);\n          wasDuplicate = true;\n        }\n      });\n      if (!wasDuplicate) {\n        relationships.HUSBANDS.push(d);\n      }\n    } else if (datum.verb === \"marries\") {\n      if (genderData[datum.targetID].gender === \"female\") {\n        let wasDuplicate = false;\n        relationships.WIVES.forEach(wives => {\n          if (wives.targetID === d.targetID) {\n            wives.passage.push(d.passage[0]);\n            wasDuplicate = true;\n          }\n        });\n        if (!wasDuplicate) {\n          relationships.WIVES.push(d);\n        }\n      } else if (genderData[datum.targetID].gender === \"male\") {\n        let wasDuplicate = false;\n        relationships.FATHERS.forEach(fathers => {\n          if (fathers.targetID === d.targetID) {\n            fathers.passage.push(d.passage[0]);\n            wasDuplicate = true;\n          }\n        });\n        if (!wasDuplicate) {\n          relationships.FATHERS.push(d);\n        }\n      }\n    }\n  });\n\n  /* Alphabetize the relationships */\n  relationships.MOTHERS = alphabetize(relationships.MOTHERS);\n  relationships.FATHERS = alphabetize(relationships.FATHERS);\n  relationships.WIVES = alphabetize(relationships.WIVES);\n  relationships.HUSBANDS = alphabetize(relationships.HUSBANDS);\n  relationships.SIBLINGS = alphabetize(relationships.SIBLINGS);\n  relationships.CHILDREN = alphabetize(relationships.CHILDREN);\n\n  /* Return alphabetized, complete list of relationships */\n  return {\n    id: id,\n    relationships: relationships,\n    name: name,\n    validSearch: true\n  };\n\n  // Modify the relationship and name\n};\n\n/* Alphabetize the relationship */\nconst alphabetize = (relation: any[]) => {\n  if (relation.length === 0) {\n    return [];\n  } else {\n    relation.sort(function(a, b) {\n      var relationA = a.target.toUpperCase();\n      var relationB = b.target.toUpperCase();\n      return relationA < relationB ? -1 : relationA > relationB ? 1 : 0;\n    });\n  }\n  return relation;\n};\n/* Use the entity CSV instead when receive it */\nconst getNameFromID = (id: string) => {\n  return entities[id][\"Name (Smith & Trzaskoma)\"];\n};\n\nexport const checkNoRelations = (relationships: any) => {\n  return (\n    relationships.MOTHERS.length === 0 &&\n    relationships.FATHERS.length === 0 &&\n    relationships.SIBLINGS.length === 0 &&\n    relationships.WIVES.length === 0 &&\n    relationships.HUSBANDS.length === 0 &&\n    relationships.CHILDREN.length === 0\n  );\n};\n\nconst reversedVerb = (verb: string, dirObject: string) => {\n  if (\n    verb === \"is mother of\" ||\n    verb === \"is father of\" ||\n    verb === \"is parent of\"\n  ) {\n    return \"is child of\"; // Uses generic \"is child of\" at the moment since data cards do not need gender specificity for children\n  } else if (\n    verb === \"is son of\" ||\n    verb === \"is daughter of\" ||\n    verb === \"is child of\"\n  ) {\n    if (genderData[dirObject].gender === \"female\") {\n      return \"is mother of\";\n    } else if (genderData[dirObject].gender === \"male\") {\n      return \"is father of\";\n    } else {\n      return \"is parent of\";\n    }\n  } else if (\n    verb === \"is sister of\" ||\n    verb === \"is brother of\" ||\n    verb === \"is twin of\"\n  ) {\n    return \"is sister of\";\n  } else if (\n    verb === \"is wife of\" ||\n    verb === \"is husband of\" ||\n    verb === \"marries\"\n  ) {\n    if (genderData[dirObject].gender === \"female\") {\n      return \"is wife of\";\n    } else if (genderData[dirObject].gender === \"male\") {\n      return \"is husband of\";\n    } else {\n      return \"marries\";\n    }\n  } else {\n    console.log(\n      \"Unsure of this connection, or connection is not relevant for the datacards-\",\n      verb,\n      dirObject\n    );\n    return \"\";\n  }\n};\n\nexport const getAlternativeNames = (id: string) => {\n  let alternatives: string = \"\";\n  if (entities[id][\"Name (transliteration)\"] !== \"\") {\n    if (alternatives === \"\") {\n      alternatives = entities[id][\"Name (transliteration)\"];\n    } else {\n      alternatives =\n        alternatives + \", \" + entities[id][\"Name (transliteration)\"];\n    }\n  }\n  if (entities[id][\"Name (Latinized)\"] !== \"\") {\n    if (alternatives === \"\") {\n      alternatives = entities[id][\"Name (Latinized)\"];\n    } else {\n      alternatives = alternatives + \", \" + entities[id][\"Name (Latinized)\"];\n    }\n  }\n  if (entities[id][\"Name in Latin texts\"] !== \"\") {\n    if (alternatives === \"\") {\n      alternatives = entities[id][\"Name in Latin texts\"];\n    } else {\n      alternatives = alternatives + \", \" + entities[id][\"Name in Latin texts\"];\n    }\n  }\n  if (entities[id][\"Alternative names\"] !== \"\") {\n    if (alternatives === \"\") {\n      alternatives = entities[id][\"Alternative names\"];\n    } else {\n      alternatives = alternatives + \", \" + entities[id][\"Alternative names\"];\n    }\n  }\n  if (alternatives === \"\") {\n    return alternatives;\n  } else {\n    return \"(Also known as: \" + alternatives + \")\";\n  }\n};\n","import React from \"react\";\nimport \"./App.css\";\nimport \"./DataCards.scss\";\nimport queryString from \"querystring\";\nimport passages from \"./data/passages.json\";\nimport EntityGraph from \"./EntityGraph\";\nimport ReactGA from \"react-ga\";\nimport {\n  relationshipInfo,\n  updateComponent,\n  checkNoRelations,\n  getAlternativeNames\n} from \"./DataCardHandler\";\nimport Pluralize from \"pluralize\";\n\ntype DatumProps = {\n  location: {\n    search: string;\n  };\n  history: {\n    push: ({}) => null;\n  };\n};\ntype DatumState = {\n  id: string;\n  name: string;\n  relationships: relationshipInfo;\n  validSearch: boolean;\n};\n\nclass DataCards extends React.Component<DatumProps, DatumState> {\n  constructor(props: any) {\n    super(props);\n    // Dionysus is 8188175, use to test multiple names\n    // Atreus is 8187873\n    // Theseus is 8188822\n    // Agamemnon is 8182035\n    // Use Clytaimnestra example, 8188055\n    this.state = {\n      id: \"8182035\",\n      name: \"\",\n      relationships: {\n        MOTHERS: [],\n        FATHERS: [],\n        SIBLINGS: [],\n        WIVES: [],\n        HUSBANDS: [],\n        CHILDREN: []\n      },\n      validSearch: false\n    };\n    /* this.getNameFromID = this.getNameFromID.bind(this);\n    this.checkNoRelations = this.checkNoRelations.bind(this);\n    this.reversedVerb = this.reversedVerb.bind(this);\n    this.getDataPoints = this.getDataPoints.bind(this);\n    this.handleNameClicked = this.handleNameClicked.bind(this);\n    this.getAlternativeNames = this.getAlternativeNames.bind(this); */\n  }\n\n  /*******************/\n  /* HELPER FUNCTIONS */\n  /*******************/\n\n  getPassageLink(passage: any) {\n    let id = passage.startID;\n    let author: string = passages[id].Author;\n    let title: string = passages[id].Title;\n    let start: string = passages[id].Passage;\n    let end: string = passage.endID;\n\n    // Dealing with multiple URNs\n    let URN: string = \"\";\n    let URNsplit = passages[id][\"CTS URN\"].split(\", \");\n    if (URNsplit.length >= 2) {\n      URN = URNsplit[1];\n    } else {\n      URN = passages[id][\"CTS URN\"];\n    }\n\n    URN = \"https://scaife.perseus.org/reader/\" + URN;\n    if (passage.endID !== \"\") {\n      end = passages[end].Passage;\n      URN = URN + \"-\" + end;\n    }\n    URN = URN + \"/?right=perseus-eng2\";\n\n    return (\n      <span>\n        {\"  (\"}\n        <a\n          target=\"_blank\"\n          rel=\"noopener noreferrer\"\n          href={URN}\n          style={{\n            color: \"grey\",\n            fontSize: \"0.8rem\"\n          }}\n        >\n          {author + \", \"}\n          <span style={{ fontStyle: \"italic\" }}>{title}</span> {start}\n          {start !== end && end !== \"\" ? \"-\" + end : \"\"}\n        </a>\n        {\")\"}\n      </span>\n    );\n  }\n\n  handleNameClicked(targetID: string) {\n    ReactGA.event({\n      category: \"NameClicked\",\n      action: \"User clicked on a name within the data card\"\n    });\n    this.props.history.push(\"/datacards?id=\" + targetID);\n  }\n\n  getDataPoints(relationship: string) {\n    let that = this;\n    if (that.state.relationships[relationship].length !== 0) {\n      return (\n        <div style={{ clear: \"both\" }}>\n          <div\n            style={{\n              fontWeight: \"bold\",\n              textTransform: \"uppercase\",\n              float: \"left\",\n              paddingRight: \"1rem\"\n            }}\n          >\n            {this.state.relationships[relationship].length === 1\n              ? Pluralize.singular(relationship) + \": \"\n              : relationship + \": \"}\n          </div>\n          <div style={{ float: \"left\" }}>\n            {that.state.relationships[relationship].map(entity => {\n              return (\n                <div style={{ margin: \"0\" }}>\n                  <div\n                    className=\"entity-button\"\n                    onClick={() => this.handleNameClicked(entity.targetID)}\n                  >\n                    {entity.target}\n                  </div>\n                  {entity.passage.map(passage => {\n                    return this.getPassageLink(passage);\n                  })}\n                </div>\n              );\n            })}\n          </div>\n        </div>\n      );\n    } else {\n      return null;\n    }\n  }\n\n  /*******************/\n  /* SETUP FUNCTIONS */\n  /*******************/\n\n  componentDidMount() {\n    const params = queryString.parse(this.props.location.search.slice(1));\n    const id = params.id as string;\n    if (!params.id) {\n      // Handle bad url\n      //@ts-ignore\n      this.setState({ validSearch: false });\n    } else {\n      //Substitute with ID\n      // this.updateComponent(this.state.id);\n      let newState = updateComponent(id);\n      this.setState({\n        id: newState.id,\n        relationships: newState.relationships,\n        name: newState.name,\n        validSearch: newState.validSearch\n      });\n    }\n  }\n\n  componentDidUpdate() {\n    const params = queryString.parse(this.props.location.search.slice(1));\n    const id = params.id as string;\n    if (!params.id) {\n      // Handle bad url\n      //@ts-ignore\n      this.setState({ validSearch: false });\n    } else if (this.state.id !== id) {\n      //Substitute with ID\n      // this.updateComponent(this.state.id);\n      let newState = updateComponent(id);\n      this.setState({\n        id: newState.id,\n        relationships: newState.relationships,\n        name: newState.name,\n        validSearch: newState.validSearch\n      });\n    }\n  }\n\n  /*************/\n  /* RENDERING */\n  /*************/\n\n  render() {\n    return (\n      <React.Fragment>\n        <div\n          className={this.state.validSearch ? \"no-display\" : \"\"}\n          style={{ textAlign: \"center\", padding: \"3rem\" }}\n        >\n          No profiles have been selected. Try using the Search function.\n        </div>\n        <div className={this.state.validSearch ? \"\" : \"no-display\"}>\n          <div\n            style={{\n              margin: \"1rem 6rem 3rem 6rem\",\n              padding: \"3rem\",\n              display: \"flow-root\",\n              border: \"solid 1px black\"\n            }}\n          >\n            <div id=\"datacard-heading\">{this.state.name}</div>\n            <div id=\"datacard-alternativenames\">\n              {getAlternativeNames(this.state.id)}\n            </div>\n            <div id=\"datacard-mantoID\">MANTO ID: {this.state.id}</div>\n            {/* If no data is available for the subject */}\n            <div\n              className={\n                checkNoRelations(this.state.relationships) ? \"\" : \"no-display\"\n              }\n            >\n              No relationship data is available for {this.state.name}.\n            </div>\n            {/* If data is available for the subject */}\n            {Object.keys(this.state.relationships).map(key => {\n              return <div key={key}>{this.getDataPoints(key)}</div>;\n            })}\n          </div>\n        </div>\n        {/* \n        <EntityGraph\n          id={this.state.id}\n          relationships={this.state.relationships}\n        ></EntityGraph>\n        */}\n      </React.Fragment>\n    );\n  }\n}\n\nexport default DataCards;\n","import React from \"react\";\nimport \"./App.css\";\nimport Header from \"./Header\";\nimport Search from \"./Search\";\nimport DataCards from \"./DataCards\";\nimport ReactGA from \"react-ga\";\nimport {\n  HashRouter as Router,\n  Route,\n  Link,\n  Switch,\n  Redirect\n} from \"react-router-dom\";\n\nclass App extends React.Component<{}, {}> {\n  constructor(props: any) {\n    super(props);\n    this.state = {\n      subjectID: \"\"\n    };\n  }\n\n  changeEntity(ID: string) {\n    this.setState({ subjectID: ID });\n  }\n\n  initializeReactGA() {\n    ReactGA.initialize(\"UA-151993194-1\");\n    ReactGA.pageview(\"/homepage\");\n  }\n\n  render() {\n    return (\n      <div\n        style={{ backgroundColor: \"#eeeeee\", height: \"100%\", width: \"100%\" }}\n      >\n        <Router>\n          <Link to=\"/\">\n            <Header></Header>\n          </Link>\n          <Search></Search>\n          <Switch>\n            {/* <Route exact path=\"/\" component={Home} /> */}\n            <Route path=\"/search\" component={Search} />\n            <Route path=\"/datacards\" component={DataCards} />\n            <Route component={() => <Redirect to=\"/\" />} />\n          </Switch>\n        </Router>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}