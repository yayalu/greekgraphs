{"version":3,"sources":["images/arrow.svg","images/logo.svg","Header.tsx","Search.tsx","EntityGraph.tsx","DataCardHandler.ts","DataCards.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["module","exports","Header","style","paddingTop","textAlign","src","require","alt","width","Search","props","pageRedirect","state","redirect","to","targetID","handleSearch","bind","handleSearchKeyDown","getDescriptors","id","this","hasKey","entities","alternatives","ReactGA","event","category","action","currentInput","document","getElementById","value","split","currentInputName","trim","setState","which","keyCode","obj","key","Fragment","margin","placeholder","list","onKeyDown","fontSize","maxHeight","Object","values","map","entity","arrow","onClick","className","React","Component","EntityGraph","familyTies","updateComponent","connections","getAllConnections","sortConnectionsIntoRelationships","ties","forEach","tieRow","includes","Verb","passageInfo","start","startID","end","endID","getGender","push","target","getName","verb","passage","reversedVerb","console","log","name","type","members","relationships","MOTHERS","FATHERS","SIBLINGS","TWIN","SPOUSES","CHILDREN","childrenTemp","tie","d","checkAndRemoveDuplicates","m","mother_parthenogenesis","f","father_parthenogenesis","a","autochthony","getIndirectSiblings","alphabetize","getOtherParents","alphabetizeChildren","validSearch","duplicate","e","passageDuplicate","p","checkAndRemoveParentDuplicates","parentID","newChild","children","parentDuplicate","childDuplicate","c","otherParentID","i","child","length","relation","sort","b","relationA","toUpperCase","relationB","r","mainGender","parentsGrouped","dirObject","mothers","fathers","siblings","newsiblings","testsibling","motherMatch","fatherMatch","info","testinfo","keys","k","getNameString","parameter","stringSoFar","s","entityRow","possibleNames","undefined","DataCards","author","passages","Author","title","Title","Passage","URN","URNsplit","rel","href","color","fontStyle","history","relationship","showPassage","clear","fontWeight","textTransform","float","paddingRight","marginTop","Pluralize","singular","checkUnusualRelationship","handleNameClicked","textDecoration","getPassageLink","getChildParentGrouped","group","marginBottom","member","params","queryString","parse","location","search","slice","newState","padding","display","border","getAlternativeNames","getDataPoints","getCollectiveMembers","App","subjectID","ID","initialize","pageview","backgroundColor","height","path","component","Boolean","window","hostname","match","ReactDOM","render","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.ea0564b3.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/arrow.1cd80763.svg\";","module.exports = __webpack_public_path__ + \"static/media/logo.1740fffd.svg\";","import React from \"react\";\nimport \"./App.css\";\n\nconst Header: React.FC = () => {\n  return (\n    <div style={{ paddingTop: \"4rem\", textAlign: \"center\" }}>\n      <img\n        src={require(\"./images/logo.svg\")}\n        alt=\"Manto logo\"\n        style={{ width: \"20%\" }}\n      ></img>\n    </div>\n  );\n};\n\nexport default Header;\n","import React from \"react\";\nimport \"./App.css\";\nimport entities from \"./data/entities.json\";\nimport { Redirect } from \"react-router-dom\";\nimport arrow from \"./images/arrow.svg\";\nimport ReactGA from \"react-ga\";\n\ntype SearchProps = {};\ntype SearchState = {\n  redirect: boolean;\n  targetID: string;\n};\n\nclass Search extends React.Component<SearchProps, SearchState> {\n  constructor(props: any) {\n    super(props);\n    this.state = {\n      redirect: false,\n      targetID: \"\"\n    };\n    // this.onSearchSubmit = this.onSearchSubmit.bind(this);\n    this.handleSearch = this.handleSearch.bind(this);\n    this.handleSearchKeyDown = this.handleSearchKeyDown.bind(this);\n    this.getDescriptors = this.getDescriptors.bind(this);\n  }\n\n  getDescriptors(id: string) {\n    if (this.hasKey(entities, id)) {\n      let alternatives: string = \"\";\n      if (entities[id][\"Name (transliteration)\"] !== \"\") {\n        alternatives =\n          alternatives + \", \" + entities[id][\"Name (transliteration)\"];\n      }\n      if (entities[id][\"Name (Latinized)\"] !== \"\") {\n        alternatives = alternatives + \", \" + entities[id][\"Name (Latinized)\"];\n      }\n      if (entities[id][\"Name in Latin texts\"] !== \"\") {\n        alternatives =\n          alternatives + \", \" + entities[id][\"Name in Latin texts\"];\n      }\n      if (entities[id][\"Alternative names\"] !== \"\") {\n        alternatives = alternatives + \", \" + entities[id][\"Alternative names\"];\n      }\n      let inputText =\n        entities[id][\"Name (Smith & Trzaskoma)\"] +\n        alternatives +\n        \": \" +\n        entities[id][\"Identifying information\"];\n      return inputText;\n    }\n  }\n\n  pageRedirect = () => {\n    if (this.state.redirect) {\n      return <Redirect to={\"/datacards?id=\" + this.state.targetID} />;\n    }\n  };\n\n  handleSearch() {\n    ReactGA.event({\n      category: \"Search\",\n      action: \"User searched for an entity using the search bar\"\n    });\n    let currentInput = document.getElementById(\"input\") as HTMLInputElement;\n    if (currentInput.value !== \"\") {\n      //Search based on name and identifying information - super inefficient. TODO: fix this\n      for (let id in entities) {\n        if (this.hasKey(entities, id)) {\n          if (\n            entities[id][\"Identifying information\"] ===\n            currentInput.value.split(\": \")[1]\n          ) {\n            let currentInputName = currentInput.value\n              .split(\": \")[0]\n              .split(\",\")[0]\n              .trim();\n\n            if (\n              currentInputName === entities[id][\"Name (Smith & Trzaskoma)\"] ||\n              currentInputName === entities[id][\"Name (transliteration)\"] ||\n              currentInputName === entities[id][\"Name (Latinized)\"] ||\n              currentInputName === entities[id][\"Name in Latin texts\"] ||\n              currentInputName === entities[id][\"Alternative names\"]\n            ) {\n              this.setState({\n                redirect: true,\n                targetID: id\n              });\n            }\n          }\n        }\n      }\n    }\n  }\n\n  handleSearchKeyDown(event: any) {\n    if (event.which === 13 || event.keyCode === 13) {\n      this.handleSearch();\n    }\n  }\n\n  /* Addresses typescript indexing objects error */\n  hasKey<O>(obj: O, key: keyof any): key is keyof O {\n    return key in obj;\n  }\n\n  render() {\n    /* const entitiesArray = Object.values(entities).map(entity => {\n      return {\n        // what to show to the user\n        label: entity.ID + \": \" + this.getDescriptors(entity.ID),\n        // key to identify the item within the array\n        key: entity.ID\n      };\n    }); */\n    return (\n      <React.Fragment>\n        {/* <h3 style={{ textAlign: \"center\" }}>SEARCH</h3> */}\n        {this.pageRedirect()}\n        <div\n          style={{\n            margin: \"1rem 0 1rem 0\",\n            textAlign: \"center\"\n          }}\n        >\n          {/* <DataListInput\n          placeholder={\"Search by entity name...\"}\n          items={entitiesArray}\n          onSelect={this.pageRedirect}\n          match={this.matchCurrentInput}\n        /> */}\n          <input\n            // type=\"search\"\n            placeholder=\"Search by name\"\n            id=\"input\"\n            list=\"entities\"\n            onKeyDown={this.handleSearchKeyDown}\n            style={{ width: \"50%\", textAlign: \"center\", fontSize: \"1rem\" }}\n          ></input>\n          <datalist id=\"entities\" style={{ maxHeight: \"100px\" }}>\n            {Object.values(entities).map(entity => {\n              return (\n                <option\n                  value={this.getDescriptors(entity[\"\\ufeffID\"])}\n                ></option>\n              );\n            })}\n          </datalist>\n          <div>\n            <img\n              alt=\"Submit search\"\n              src={arrow}\n              onClick={this.handleSearch}\n              className=\"search-arrow\"\n            ></img>\n          </div>\n        </div>\n      </React.Fragment>\n    );\n  }\n}\n\nexport default Search;\n","import React from \"react\";\nimport \"./App.css\";\nimport { getGraph } from \"./GraphHandler\";\nimport entities from \"./data/entities.json\";\n\ntype GraphProps = { id: string; relationships: any };\ntype GraphState = {};\n\nclass EntityGraph extends React.Component<GraphProps, GraphState> {\n  constructor(props: any) {\n    super(props);\n  }\n\n  getName(id: string) {\n    return entities[id][\"Name (Smith & Trzaskoma)\"];\n  }\n\n  render() {\n    {\n      /* getGraph(2, this.props.id, this.props.relationships); */\n    }\n    return <div></div>;\n  }\n}\n\nexport default EntityGraph;\n","import ties from \"./data/ties.json\";\nimport entities from \"./data/entities.json\";\n\ntype passageInfo = {\n  start: string;\n  startID: string;\n  end: string;\n  endID: string;\n};\n\ntype entityInfo = {\n  target: string;\n  targetID: string;\n  passage: passageInfo[];\n  type: string;\n  autochthony?: boolean;\n  mother_parthenogenesis?: boolean;\n  father_parthenogenesis?: boolean;\n};\n\ntype childrenInfo = {\n  child: entityInfo[];\n  otherParentID: string;\n  divineParentID?: string;\n};\n\nexport type relationshipInfo = {\n  MOTHERS: entityInfo[];\n  FATHERS: entityInfo[];\n  SIBLINGS: entityInfo[];\n  TWIN: entityInfo[];\n  SPOUSES: entityInfo[];\n  CHILDREN: childrenInfo[];\n};\n\nlet familyTies = [\n  /* Parent */\n  \"is father of\",\n  \"is mother of\",\n  \"is parent of\",\n  /* Child */\n  \"is child of\",\n  /* Sibling */\n  \"is sibling of\",\n  \"is twin of\",\n  \"is older than\",\n  /* Spouse */\n  \"is spouse of\",\n  \"marries\",\n  /* Ancestors - currently unused\n  \"is grandfather of\",\n  \"is grandmother of\",\n  \"is grandparent of\",\n  \"is grandson of\",\n  \"is granddaughter of\",\n  \"is grandchild of\",\n  */\n\n  /* Member of collective */\n  \"is part of\",\n  \"is member of\",\n\n  /* Unusual relationships */\n  \"is mother by parthenogenesis of\",\n  \"is father by parthenogenesis of\",\n  \"is born by autochthony [in/on/at]\"\n];\n\n/******************************************************************************************/\n/* Returns the data card geneology information, interfaces with DataCards.tsx                \n/******************************************************************************************/\nexport const updateComponent = (id: string) => {\n  let connections = getAllConnections(id);\n  return sortConnectionsIntoRelationships(id, connections);\n};\n\n/******************************************************************************************/\n/* Find all relationships                                                                 */\n/* -------------------------------------------------------------------------------------- */\n/* This function changes all ties (X <verb> Y, Y <verb> X, Z <verb> Y X) to Y <verb> X. */\n/******************************************************************************************/\nconst getAllConnections = (id: string) => {\n  var connections: {\n    target: string;\n    targetID: string;\n    verb: string;\n    passage: passageInfo[];\n  }[] = [];\n\n  Object.values(ties).forEach(function(tieRow) {\n    // TODO: Fix this temporary solution for entities not existing in entities.csv\n    if (entities[tieRow[\"Subject ID\"]]) {\n      /*********************************************************/\n      /* If you are the direct object X, e.g. (Y (verb) X)     */\n      /*********************************************************/\n      if (\n        tieRow[\"Direct Object ID\"] === id &&\n        familyTies.includes(tieRow.Verb)\n      ) {\n        let passageInfo: passageInfo[] = [\n          {\n            start: tieRow[\"Passage: start\"],\n            startID: tieRow[\"Passage: start ID\"],\n            end: tieRow[\"Passage: end\"] === \"\" ? \"\" : tieRow[\"Passage: end\"],\n            endID: tieRow[\"Passage: end ID\"]\n          }\n        ];\n\n        // TODO: Fix this temporary solution for gender data not existing for entity\n        if (getGender(tieRow[\"Subject ID\"]) && tieRow.Verb === \"marries\") {\n          tieRow.Verb = \"is spouse of\";\n        }\n\n        // Push connections to the list of connections\n        connections.push({\n          target: getName(entities[tieRow[\"Subject ID\"]]),\n          targetID: tieRow[\"Subject ID\"],\n          verb: tieRow.Verb,\n          passage: passageInfo\n        });\n      }\n\n      /*********************************************************/\n      /* If you are the subject X, e.g. (X (verb) Y)           */\n      /*********************************************************/\n      if (tieRow[\"Subject ID\"] === id && familyTies.includes(tieRow.Verb)) {\n        let passageInfo: passageInfo[] = [\n          {\n            start: tieRow[\"Passage: start\"],\n            startID: tieRow[\"Passage: start ID\"],\n            end: tieRow[\"Passage: end\"] === \"\" ? \"\" : tieRow[\"Passage: end\"],\n            endID: tieRow[\"Passage: end ID\"]\n          }\n        ];\n\n        // Push connections to the list of connections\n        if (tieRow.Verb === \"is born by autochthony [in/on/at]\") {\n          connections.push({\n            target: \"\",\n            targetID: \"\",\n            verb: \"is born by autochthony [in/on/at]\",\n            passage: passageInfo\n          });\n        } else {\n          //TODO: Find better fix for this Minos is child of Crete (object) issue\n          if (tieRow[\"Direct Object ID\"] !== \"8188818\") {\n            connections.push({\n              target: getName(entities[tieRow[\"Direct Object ID\"]]),\n              targetID: tieRow[\"Direct Object ID\"],\n              verb: reversedVerb(tieRow.Verb, tieRow[\"Direct Object ID\"]),\n              passage: passageInfo\n            });\n          }\n        }\n      }\n\n      /***********************************************************************/\n      /* For \"Gives in marriage:\" - parent gives child in marriage to person */\n      /*************************************************************************/\n\n      // If you are the indirect object X, e.g. (Z (verb) Y X)\n      if (\n        tieRow[\"Indirect Object (to/for) ID\"] &&\n        tieRow[\"Indirect Object (to/for) ID\"] === id &&\n        tieRow.Verb === \"gives in marriage [dir. obj.] [ind. obj.]\"\n      ) {\n        let passageInfo: passageInfo[] = [\n          {\n            start: tieRow[\"Passage: start\"],\n            startID: tieRow[\"Passage: start ID\"],\n            end: tieRow[\"Passage: end\"] === \"\" ? \"\" : tieRow[\"Passage: end\"],\n            endID: tieRow[\"Passage: end ID\"]\n          }\n        ];\n        console.log(\"Indirect object to:\", tieRow[\"Direct Object\"]);\n        connections.push({\n          target: getName(entities[tieRow[\"Direct Object ID\"]]),\n          targetID: tieRow[\"Direct Object ID\"],\n          verb: \"is spouse of\",\n          passage: passageInfo\n        });\n      }\n\n      // If you are the direct object X, e.g. (Z (verb) X Y)\n      else if (\n        tieRow[\"Direct Object ID\"] &&\n        tieRow[\"Direct Object ID\"] === id &&\n        tieRow.Verb === \"gives in marriage [dir. obj.] [ind. obj.]\"\n      ) {\n        let passageInfo: passageInfo[] = [\n          {\n            start: tieRow[\"Passage: start\"],\n            startID: tieRow[\"Passage: start ID\"],\n            end: tieRow[\"Passage: end\"] === \"\" ? \"\" : tieRow[\"Passage: end\"],\n            endID: tieRow[\"Passage: end ID\"]\n          }\n        ];\n        connections.push({\n          target: getName(entities[tieRow[\"Indirect Object (to/for) ID\"]]),\n          targetID: tieRow[\"Indirect Object (to/for) ID\"],\n          verb: \"is spouse of\",\n          passage: passageInfo\n        });\n      }\n    }\n  });\n\n  return connections;\n};\n\n/******************************************************************************************/\n/* Sort relationships                                                                     */\n/* -------------------------------------------------------------------------------------- */\n/* This function sorts all of the found connections into existing geneological categories */\n/******************************************************************************************/\nconst sortConnectionsIntoRelationships = (id: string, connections: any) => {\n  /* Preliminary info about the entity */\n  let name = getName(entities[id]);\n  let type = entities[id][\"Type of entity\"];\n  let members: any[] = [];\n  let relationships: relationshipInfo = {\n    MOTHERS: [],\n    FATHERS: [],\n    SIBLINGS: [],\n    TWIN: [],\n    SPOUSES: [],\n    CHILDREN: []\n  };\n\n  let childrenTemp: entityInfo[] = [];\n  connections.forEach(tie => {\n    // For each of the connections already found,\n    // build the associated entity object, and\n    // populate with existing information\n    let d: entityInfo = {\n      target: tie.target,\n      targetID: tie.targetID,\n      passage: tie.passage,\n      type:\n        tie.verb === \"is born by autochthony [in/on/at]\"\n          ? \"\"\n          : entities[tie.targetID][\"Type of entity\"]\n    };\n\n    /* Categorising the connections, also checking for duplicates */\n\n    // X is your MOTHER\n    if (tie.verb === \"is mother of\") {\n      // If passage is a duplicate / already exists\n      // for this entity, or  in the list of connections\n      relationships.MOTHERS = checkAndRemoveDuplicates(\n        relationships.MOTHERS,\n        d\n      );\n    }\n\n    // X is your MOTHER by parthenogenesis\n    else if (tie.verb === \"is mother by parthenogenesis of\") {\n      let m: entityInfo = {\n        target: tie.target,\n        targetID: tie.targetID,\n        passage: tie.passage,\n        type: entities[tie.targetID][\"Type of entity\"],\n        mother_parthenogenesis: true\n      };\n\n      relationships.MOTHERS = checkAndRemoveDuplicates(\n        relationships.MOTHERS,\n        m\n      );\n    }\n\n    // X is your FATHER\n    else if (tie.verb === \"is father of\") {\n      relationships.FATHERS = checkAndRemoveDuplicates(\n        relationships.FATHERS,\n        d\n      );\n    }\n\n    // X is your FATHER by parthenogenesis\n    else if (tie.verb === \"is father by parthenogenesis of\") {\n      let f: entityInfo = {\n        target: tie.target,\n        targetID: tie.targetID,\n        passage: tie.passage,\n        type: entities[tie.targetID][\"Type of entity\"],\n        father_parthenogenesis: true\n      };\n      relationships.FATHERS = checkAndRemoveDuplicates(\n        relationships.FATHERS,\n        f\n      );\n    }\n\n    // X is your CHILD\n    else if (tie.verb === \"is child of\") {\n      childrenTemp = checkAndRemoveDuplicates(childrenTemp, d);\n    }\n\n    // X is your SIBLING\n    else if (tie.verb === \"is sibling of\" || tie.verb === \"is older than\") {\n      relationships.SIBLINGS = checkAndRemoveDuplicates(\n        relationships.SIBLINGS,\n        d\n      );\n    }\n\n    // X is your TWIN\n    else if (tie.verb === \"is twin of\") {\n      relationships.TWIN = checkAndRemoveDuplicates(relationships.TWIN, d);\n    }\n    // X is your WIFE / HUSBAND\n    else if (tie.verb === \"is spouse of\" || tie.verb === \"marries\") {\n      relationships.SPOUSES = checkAndRemoveDuplicates(\n        relationships.SPOUSES,\n        d\n      );\n    }\n    // X is a MEMBER of a collective\n    else if (tie.verb === \"is part of\") {\n      members = checkAndRemoveDuplicates(members, d);\n    }\n    // X is born by autochthony\n    else if (tie.verb === \"is born by autochthony [in/on/at]\") {\n      let a: entityInfo = {\n        target: \"\",\n        targetID: \"\",\n        passage: tie.passage,\n        type: entities[id][\"Type of entity\"],\n        autochthony: true\n      };\n      relationships.FATHERS = checkAndRemoveDuplicates(\n        relationships.FATHERS,\n        a\n      );\n    }\n  });\n\n  /* TODO: Check for any indirect siblings in the ties */\n  relationships.SIBLINGS = getIndirectSiblings(\n    id,\n    relationships.MOTHERS,\n    relationships.FATHERS,\n    relationships.SIBLINGS\n  );\n\n  /* Alphabetize the relationships */\n  relationships.MOTHERS = alphabetize(relationships.MOTHERS);\n  relationships.FATHERS = alphabetize(relationships.FATHERS);\n  relationships.SIBLINGS = alphabetize(relationships.SIBLINGS);\n  relationships.TWIN = alphabetize(relationships.TWIN);\n  relationships.SPOUSES = alphabetize(relationships.SPOUSES);\n  members = alphabetize(members);\n\n  // Currently very inefficient, but finds the other parent of the child\n  relationships.CHILDREN = getOtherParents(id, childrenTemp);\n  relationships.CHILDREN = alphabetizeChildren(relationships.CHILDREN);\n\n  /* Return alphabetized, complete list of relationships */\n  return {\n    id: id,\n    relationships: relationships,\n    name: name,\n    members: members,\n    type: type,\n    validSearch: true\n  };\n};\n\n/******************************************************************************************/\n/* Check passage and entity duplicates                                                    */\n/* -------------------------------------------------------------------------------------- */\n/* This function removes duplicate ties (incl. after reversal) and duplicate passages   */\n/* for the same connected entity                                                          */\n/******************************************************************************************/\nconst checkAndRemoveDuplicates = (entities: any[], d: entityInfo) => {\n  let duplicate = false;\n  entities.forEach(e => {\n    if (e.targetID === d.targetID) {\n      duplicate = true;\n      let passageDuplicate = false;\n      e.passage.forEach(p => {\n        if (\n          p.startID === d.passage[0].startID &&\n          p.endID === d.passage[0].endID\n        ) {\n          passageDuplicate = true;\n        }\n      });\n      if (!passageDuplicate) {\n        e.passage.push(d.passage[0]);\n      }\n    }\n  });\n  if (!duplicate) {\n    entities.push(d);\n  }\n  return entities;\n};\n\nconst checkAndRemoveParentDuplicates = (\n  parentID: string, //parent\n  newChild: entityInfo, //child entity info\n  children: childrenInfo[] //parentsGrouped - existing parents list\n) => {\n  // This function removes duplicates but also groups children by the \"other\" parent\n  // returns childrenInfo object: {child: <list of associated children>, otherParentID}\n  let parentDuplicate = false;\n  let childDuplicate = false;\n  children.forEach(c => {\n    if (c.otherParentID === parentID) {\n      parentDuplicate = true;\n      for (let i = 0; i < c.child.length; i++) {\n        if (c.child[i].targetID === newChild.targetID) {\n          childDuplicate = true;\n        }\n      }\n      if (!childDuplicate) {\n        c.child.push(newChild);\n      }\n    }\n  });\n  if (!parentDuplicate) {\n    children.push({ child: [newChild], otherParentID: parentID });\n  }\n\n  return children;\n};\n\n/******************************************************************************************/\n/* Alphabetize the list of names in each category                                         */\n/******************************************************************************************/\nconst alphabetize = (relation: any[]) => {\n  if (relation.length === 0) {\n    return [];\n  } else {\n    relation.sort(function(a, b) {\n      var relationA = a.target.toUpperCase();\n      var relationB = b.target.toUpperCase();\n      return relationA < relationB ? -1 : relationA > relationB ? 1 : 0;\n    });\n  }\n  return relation;\n};\n\nconst alphabetizeChildren = (relation: childrenInfo[]) => {\n  if (relation.length === 0) {\n    return [];\n  } else {\n    relation.forEach(r => {\n      r.child = alphabetize(r.child);\n    });\n    relation.sort(function(a, b) {\n      var relationA = getName(entities[a.otherParentID]);\n      var relationB = getName(entities[b.otherParentID]);\n      return relationA < relationB ? -1 : relationA > relationB ? 1 : 0;\n    });\n  }\n  return relation;\n};\n\n/******************************************************************************************/\n/* TODO: Fix this very VERY inefficient method of finding the other parent                */\n/******************************************************************************************/\nconst getOtherParents = (id: string, children: entityInfo[]) => {\n  let mainGender = getGender(id);\n  let parentsGrouped: childrenInfo[] = [];\n  children.forEach(c => {\n    Object.values(ties).forEach(function(tieRow) {\n      // rudimentary solution for entities causing errors\n      if (mainGender === \"Female\") {\n        // Y is CHILD of Z, where Y is child of X and X != Z\n        if (\n          tieRow[\"Subject ID\"] === c.targetID &&\n          tieRow[\"Verb\"] === \"is child of\" &&\n          tieRow[\"Direct Object ID\"] !== id\n        ) {\n          if (\n            getGender(tieRow[\"Direct Object ID\"]) === \"Male\" &&\n            entities[tieRow[\"Direct Object ID\"]][\"Type of entity\"] === \"Agent\"\n          ) {\n            parentsGrouped = checkAndRemoveParentDuplicates(\n              tieRow[\"Direct Object ID\"],\n              c,\n              parentsGrouped\n            );\n          }\n        }\n        // Z is FATHER of Y, where Y is child of X and X != Z\n        else if (\n          tieRow[\"Direct Object ID\"] === c.targetID &&\n          tieRow[\"Verb\"] === \"is father of\" &&\n          tieRow[\"Subject ID\"] !== id\n        ) {\n          if (\n            getGender(tieRow[\"Subject ID\"]) === \"Male\" &&\n            entities[tieRow[\"Subject ID\"]][\"Type of entity\"] === \"Agent\"\n          ) {\n            parentsGrouped = checkAndRemoveParentDuplicates(\n              tieRow[\"Subject ID\"],\n              c,\n              parentsGrouped\n            );\n          }\n        }\n      }\n      // rudimentary solution for entities causing errors\n      if (mainGender === \"Male\") {\n        // Y is CHILD of Z, where Y is child of X and X != Z\n        if (\n          tieRow[\"Subject ID\"] === c.targetID &&\n          tieRow[\"Verb\"] === \"is child of\" &&\n          tieRow[\"Direct Object ID\"] !== id\n        ) {\n          if (\n            getGender(tieRow[\"Direct Object ID\"]) === \"Female\" &&\n            entities[tieRow[\"Direct Object ID\"]][\"Type of entity\"] === \"Agent\"\n          ) {\n            parentsGrouped = checkAndRemoveParentDuplicates(\n              tieRow[\"Direct Object ID\"],\n              c,\n              parentsGrouped\n            );\n          }\n        }\n        // Z is MOTHER of Y, where Y is child of X and X != Z\n        else if (\n          tieRow[\"Direct Object ID\"] === c.targetID &&\n          tieRow[\"Verb\"] === \"is mother of\" &&\n          tieRow[\"Subject ID\"] !== id\n        ) {\n          if (\n            getGender(tieRow[\"Subject ID\"]) === \"Female\" &&\n            entities[tieRow[\"Subject ID\"]][\"Type of entity\"] === \"Agent\"\n          ) {\n            parentsGrouped = checkAndRemoveParentDuplicates(\n              tieRow[\"Subject ID\"],\n              c,\n              parentsGrouped\n            );\n          }\n        }\n      }\n    });\n  });\n  // TODO: FIX PARENTS NOT SHOWING UP\n  return parentsGrouped;\n};\n\n/******************************************************************************************/\n/* Get the gender of the entity                                                           */\n/******************************************************************************************/\nexport const getGender = (id: string) => {\n  return entities[id][\"Agent/Coll.: gender\"];\n};\n\n/******************************************************************************************/\n/* Tie reversals                                                   */\n/* -------------------------------------------------------------------------------------- */\n/* This function flips the verb so that X can become the direct object,                   */\n/* without compromising the validity of the tie                                         */\n/*                                                                                        */\n/* e.g. X <is mother of> Y, where Y is <male>                                             */\n/* => returns verb <is son of>, to let X become the direct object (Y is son of X)         */\n/******************************************************************************************/\nconst reversedVerb = (verb: string, dirObject: string) => {\n  // TODO: Fix this temporary solution for gender data not existing for entity\n  // PARENT -> CHILD\n  if (verb === \"is parent of\") {\n    // Uses generic \"is child of\" since data cards do not show gender specificity for children\n    return \"is child of\";\n  }\n\n  // CHILD -> PARENT\n  else if (verb === \"is child of\") {\n    if (getGender(dirObject) === \"Female\") {\n      return \"is mother of\";\n    } else if (getGender(dirObject) === \"Male\") {\n      return \"is father of\";\n    } else {\n      // Placeholder since \"is parent of\" is not currently used in data cards\n      return \"\";\n    }\n  }\n\n  // TWIN -> TWIN\n  else if (verb === \"is twin of\") {\n    return \"is twin of\";\n  }\n\n  // SIBLING -> SIBLING\n  else if (verb === \"is sibling of\" || verb === \"is older than\") {\n    return \"is sibling of\";\n  }\n\n  // WIFE -> HUSBAND\n  // HUSBAND -> WIFE\n  // No cases of homosexual relationships in the mythology\n  else if (verb === \"is spouse of\" || verb === \"marries\") {\n    return \"is spouse of\";\n  }\n\n  // TODO: Deal with IS MEMBER OF verb here.\n  else {\n    console.log(\n      \"Unsure of the \" +\n        verb +\n        \" \" +\n        dirObject +\n        \" connection, or connection is not relevant for the datacards.\",\n      verb,\n      dirObject\n    );\n    return \"\";\n  }\n};\n\n/******************************************************************************************/\n/* Populate an array of siblings based on matching parents                                */\n/* -------------------------------------------------------------------------------------- */\n/* This function checks through the list of ties and pushes to the list of siblings:    */\n/*                                                                                        */\n/* e.g. X is <child> of A, X is <child> of B, Y is <child> of A, Y is <child> of B        */\n/******************************************************************************************/\nconst getIndirectSiblings = (\n  id: string,\n  mothers: any[],\n  fathers: any[],\n  siblings: any[]\n) => {\n  // CURRENTLY A VERY SLOW SOLUTION - OPTIMIZE IT LATER\n  // CHANGE TO POPULATING A DATABASE OF RELATIONS AND READING OFF THAT DATABASE\n  // RATHER THAN DYNAMICALLY GENERATING IT HERE (CHANGE TO O(N) NOT LEAVE AS O(N^3))\n  let newsiblings: {} = {};\n  Object.values(ties).forEach(function(tieRow) {\n    let testsibling = {\n      motherMatch: false,\n      fatherMatch: false,\n      info: {}\n    };\n    let passageInfo: passageInfo[] = [\n      {\n        start: tieRow[\"Passage: start\"],\n        startID: tieRow[\"Passage: start ID\"],\n        end: tieRow[\"Passage: end\"] === \"\" ? \"\" : tieRow[\"Passage: end\"],\n        endID: tieRow[\"Passage: end ID\"]\n      }\n    ];\n    let testinfo: entityInfo = {\n      target: \"\",\n      targetID: \"\",\n      passage: passageInfo,\n      type: entities[id][\"Type of entity\"]\n    };\n    // Firstly, determine where Y is <child> of A,B\n    if (\n      tieRow.Verb === \"is daughter of\" ||\n      tieRow.Verb === \"is son of\" ||\n      tieRow.Verb === \"is child of\"\n    ) {\n      mothers.forEach(m => {\n        if (m.targetID === tieRow[\"Direct Object ID\"]) {\n          testsibling.motherMatch = true;\n          testinfo.target = getName(entities[tieRow[\"Subject ID\"]]);\n          testinfo.targetID = tieRow[\"Subject ID\"];\n          testsibling.info = testinfo;\n          if (!(tieRow[\"Subject ID\"] in newsiblings)) {\n            newsiblings[tieRow[\"Subject ID\"]] = testsibling;\n          } else {\n            newsiblings[tieRow[\"Subject ID\"]].motherMatch = true;\n          }\n        }\n      });\n      fathers.forEach(f => {\n        if (f.targetID === tieRow[\"Direct Object ID\"]) {\n          testsibling.fatherMatch = true;\n          testinfo.target = getName(entities[tieRow[\"Subject ID\"]]);\n          testinfo.targetID = tieRow[\"Subject ID\"];\n          testsibling.info = testinfo;\n          if (!(tieRow[\"Subject ID\"] in newsiblings)) {\n            newsiblings[tieRow[\"Subject ID\"]] = testsibling;\n          } else {\n            newsiblings[tieRow[\"Subject ID\"]].fatherMatch = true;\n          }\n        }\n      });\n    }\n    // Then, determine where A is mother of Y, or if parent of Y where A is female\n    if (\n      tieRow.Verb === \"is mother of\" ||\n      tieRow.Verb === \"is divine mother of\" ||\n      (tieRow.Verb === \"is parent of\" &&\n        entities[tieRow[\"Subject ID\"]] &&\n        entities[tieRow[\"Subject ID\"]][\"Agent/Coll.: gender\"] === \"Female\")\n    ) {\n      mothers.forEach(m => {\n        if (m.targetID === tieRow[\"Subject ID\"]) {\n          testsibling.motherMatch = true;\n          testinfo.target = getName(entities[tieRow[\"Direct Object ID\"]]);\n          testinfo.targetID = tieRow[\"Direct Object ID\"];\n          testsibling.info = testinfo;\n          if (!(tieRow[\"Direct Object ID\"] in newsiblings)) {\n            newsiblings[tieRow[\"Direct Object ID\"]] = testsibling;\n          } else {\n            newsiblings[tieRow[\"Direct Object ID\"]].motherMatch = true;\n          }\n        }\n      });\n    }\n    // Then, determine where A is father of Y, or if parent of Y where A is male\n    if (\n      tieRow.Verb === \"is father of\" ||\n      tieRow.Verb === \"is divine father of\" ||\n      (tieRow.Verb === \"is parent of\" &&\n        entities[tieRow[\"Subject ID\"]] &&\n        entities[tieRow[\"Subject ID\"]][\"Agent/Coll.: gender\"] === \"Male\")\n    ) {\n      fathers.forEach(f => {\n        if (f.targetID === tieRow[\"Subject ID\"]) {\n          testsibling.fatherMatch = true;\n          testinfo.target = getName(entities[tieRow[\"Direct Object ID\"]]);\n          testinfo.targetID = tieRow[\"Direct Object ID\"];\n          testsibling.info = testinfo;\n          if (!(tieRow[\"Direct Object ID\"] in newsiblings)) {\n            newsiblings[tieRow[\"Direct Object ID\"]] = testsibling;\n          } else {\n            newsiblings[tieRow[\"Direct Object ID\"]].fatherMatch = true;\n          }\n        }\n      });\n    }\n  });\n  let keys: any[] = Object.keys(newsiblings);\n  keys.forEach(k => {\n    if (\n      !newsiblings[k].motherMatch ||\n      !newsiblings[k].fatherMatch ||\n      k === id\n    ) {\n      delete newsiblings[k];\n    } else {\n      siblings.push(newsiblings[k].info);\n    }\n  });\n  return siblings;\n};\n\n/******************************************************************************************/\n/* Check if no relations exist for this entity (used in DataCards.tsx)                    */\n/******************************************************************************************/\nexport const checkNoRelations = (relationships: any) => {\n  return (\n    relationships.MOTHERS.length === 0 &&\n    relationships.FATHERS.length === 0 &&\n    relationships.SIBLINGS.length === 0 &&\n    relationships.TWIN.length === 0 &&\n    relationships.SPOUSES.length === 0 &&\n    relationships.CHILDREN.length === 0\n  );\n};\n\n/******************************************************************************************/\n/* Return all alternative names for entity (used in DataCards.tsx)                        */\n/******************************************************************************************/\nexport const getAlternativeNames = (id: string) => {\n  let alternatives: string = \"\";\n  alternatives += getNameString(\"Name (transliteration)\", alternatives, id);\n  alternatives += getNameString(\"Name (Latinized)\", alternatives, id);\n  alternatives += getNameString(\"Name in Latin texts\", alternatives, id);\n  alternatives += getNameString(\"Alternative names\", alternatives, id);\n\n  if (alternatives === \"\") {\n    return alternatives;\n  } else {\n    return \"(Also known as: \" + alternatives + \")\";\n  }\n};\n\nconst getNameString = (parameter: string, stringSoFar: string, id: string) => {\n  let s = \"\";\n  if (entities[id][parameter] !== \"\") {\n    if (stringSoFar === \"\") {\n      s = entities[id][parameter];\n    } else {\n      s = stringSoFar + \", \" + entities[id][parameter];\n    }\n  }\n  return s;\n};\n\n/******************************************************************************************/\n/* Get the entity's name                                                                  */\n/******************************************************************************************/\nexport const getName = (entityRow: any) => {\n  let possibleNames = [\n    \"Name (Smith & Trzaskoma)\",\n    \"Name (transliteration)\",\n    \"Name (Latinized)\",\n    \"Name in Latin texts\",\n    \"Alternative names\"\n  ];\n  for (let i = 0; i < possibleNames.length; i++) {\n    if (\n      entityRow[possibleNames[i]] !== \"\" &&\n      entityRow[possibleNames[i]] !== undefined\n    ) {\n      return entityRow[possibleNames[i]];\n    }\n  }\n};\n","import React from \"react\";\nimport \"./App.css\";\nimport \"./DataCards.scss\";\nimport queryString from \"querystring\";\nimport passages from \"./data/passages.json\";\nimport EntityGraph from \"./EntityGraph\";\nimport ReactGA from \"react-ga\";\nimport entities from \"./data/entities.json\";\nimport {\n  relationshipInfo,\n  updateComponent,\n  checkNoRelations,\n  getAlternativeNames,\n  getGender,\n  getName\n} from \"./DataCardHandler\";\nimport Pluralize from \"pluralize\";\n\ntype DatumProps = {\n  location: {\n    search: string;\n  };\n  history: {\n    push: ({}) => null;\n  };\n};\ntype DatumState = {\n  id: string;\n  name: string;\n  relationships: relationshipInfo;\n  members: any[];\n  type: string;\n  validSearch: boolean;\n};\n\nclass DataCards extends React.Component<DatumProps, DatumState> {\n  constructor(props: any) {\n    super(props);\n    // Dionysus is 8188175, use to test multiple names\n    // Atreus is 8187873\n    // Theseus is 8188822\n    // Agamemnon is 8182035\n    // Use Clytaimnestra example, 8188055\n    this.state = {\n      id: \"8182035\", // placeholder\n      name: \"\",\n      relationships: {\n        MOTHERS: [],\n        FATHERS: [],\n        SIBLINGS: [],\n        TWIN: [],\n        SPOUSES: [],\n        CHILDREN: []\n      },\n      members: [],\n      type: \"\",\n      validSearch: false\n    };\n    /* this.getNameFromID = this.getNameFromID.bind(this);\n    this.checkNoRelations = this.checkNoRelations.bind(this);\n    this.reversedVerb = this.reversedVerb.bind(this);\n    this.getDataPoints = this.getDataPoints.bind(this);\n    this.handleNameClicked = this.handleNameClicked.bind(this);\n    this.getAlternativeNames = this.getAlternativeNames.bind(this); */\n  }\n\n  /*******************/\n  /* HELPER FUNCTIONS */\n  /*******************/\n\n  getPassageLink(passage: any) {\n    let id = passage.startID;\n    let author: string = passages[id].Author;\n    let title: string = passages[id].Title;\n    let start: string = passages[id].Passage;\n    let end: string = passage.endID;\n\n    // Dealing with multiple URNs\n    let URN: string = \"\";\n    let URNsplit = passages[id][\"CTS URN\"].split(\", \");\n    if (URNsplit.length >= 2) {\n      URN = URNsplit[1];\n    } else {\n      URN = passages[id][\"CTS URN\"];\n    }\n\n    URN = \"https://scaife.perseus.org/reader/\" + URN;\n    if (passage.endID !== \"\") {\n      end = passages[end].Passage;\n      URN = URN + \"-\" + end;\n    }\n    URN = URN + \"/?right=perseus-eng2\";\n\n    return (\n      <span>\n        {\"  (\"}\n        <a\n          target=\"_blank\"\n          rel=\"noopener noreferrer\"\n          href={URN}\n          style={{\n            color: \"grey\",\n            fontSize: \"0.8rem\"\n          }}\n        >\n          {author + \", \"}\n          <span style={{ fontStyle: \"italic\" }}>{title}</span> {start}\n          {start !== end && end !== \"\" ? \"-\" + end : \"\"}\n        </a>\n        {\")\"}\n      </span>\n    );\n  }\n\n  handleNameClicked(targetID: string) {\n    ReactGA.event({\n      category: \"NameClicked\",\n      action: \"User clicked on a name within the data card\"\n    });\n    this.props.history.push(\"/datacards?id=\" + targetID);\n  }\n\n  getDataPoints(relationship: string, showPassage: boolean) {\n    let that = this;\n    if (that.state.relationships[relationship].length !== 0) {\n      return (\n        <div style={{ clear: \"both\" }}>\n          <div\n            style={{\n              fontWeight: \"bold\",\n              textTransform: \"uppercase\",\n              float: \"left\",\n              paddingRight: \"1rem\",\n              marginTop: \"0.5rem\"\n            }}\n          >\n            {this.state.relationships[relationship].length === 1 &&\n            this.state.relationships[relationship][0].type !== \"Collective\"\n              ? Pluralize.singular(relationship) + \": \"\n              : relationship + \": \"}\n          </div>\n          <div style={{ float: \"left\", marginTop: \"0.5rem\" }}>\n            {that.state.relationships[relationship].map(entity => {\n              return (\n                <div style={{ margin: \"0\" }}>\n                  {this.checkUnusualRelationship(\n                    entity,\n                    relationship,\n                    showPassage\n                  )}\n                </div>\n              );\n            })}\n          </div>\n        </div>\n      );\n    } else {\n      return null;\n    }\n  }\n\n  checkUnusualRelationship(\n    entity: any,\n    relationship: any,\n    showPassage: boolean\n  ) {\n    let that = this;\n\n    if (\n      (relationship === \"MOTHERS\" && entity.mother_parthenogenesis) ||\n      (relationship === \"FATHERS\" && entity.father_parthenogenesis)\n    ) {\n      return (\n        <span>\n          <div\n            className=\"entity-button\"\n            onClick={() => this.handleNameClicked(entity.targetID)}\n          >\n            {entity !== that.state.relationships[relationship][0] ? (\n              <span>OR </span>\n            ) : (\n              \"\"\n            )}\n            <span style={{ textDecoration: \"underline\" }}>{entity.target}</span>\n          </div>\n          <span> by pathenogenesis </span>\n          {showPassage\n            ? entity.passage.map(passage => {\n                return this.getPassageLink(passage);\n              })\n            : \"\"}\n        </span>\n      );\n    } else if (relationship === \"FATHERS\" && entity.autochthony) {\n      return (\n        <span>\n          {entity !== that.state.relationships[relationship][0] ? (\n            <span>OR </span>\n          ) : (\n            \"\"\n          )}\n          <span>By autochthony </span>\n          {showPassage\n            ? entity.passage.map(passage => {\n                return this.getPassageLink(passage);\n              })\n            : \"\"}\n        </span>\n      );\n    } else if (relationship === \"CHILDREN\") {\n      return (\n        <div className=\"entity-child-wrapper\">\n          <div className=\"entity-child-grouping\">\n            {that.getChildParentGrouped(entity)}\n          </div>\n          <div className=\"entity-parent-grouping\">\n            with{\" \"}\n            <span\n              className=\"entity-child-button\"\n              style={{ margin: 0 }}\n              onClick={() => this.handleNameClicked(entity.otherParentID)}\n            >\n              {getName(entities[entity.otherParentID])}\n            </span>\n          </div>\n        </div>\n      );\n    } else {\n      return (\n        <span>\n          <div\n            className=\"entity-button\"\n            onClick={() => this.handleNameClicked(entity.targetID)}\n          >\n            {entity !== that.state.relationships[relationship][0] &&\n            relationship !== \"CHILDREN\" &&\n            relationship !== \"SIBLINGS\" &&\n            relationship !== \"SPOUSES\" ? (\n              <span>OR </span>\n            ) : (\n              \"\"\n            )}\n            <span style={{ textDecoration: \"underline\" }}>{entity.target}</span>\n          </div>\n          {showPassage\n            ? entity.passage.map(passage => {\n                return this.getPassageLink(passage);\n              })\n            : \"\"}\n        </span>\n      );\n    }\n  }\n\n  getChildParentGrouped(group: any) {\n    return group.child.map(c => {\n      return (\n        <div\n          className=\"entity-child-button\"\n          onClick={() => this.handleNameClicked(c.targetID)}\n        >\n          {c.target}\n        </div>\n      );\n    });\n  }\n\n  getCollectiveMembers() {\n    let that = this;\n    if (that.state.members.length !== 0) {\n      return (\n        <div style={{ marginTop: \"3rem\", textAlign: \"center\" }}>\n          <div\n            style={{\n              fontWeight: \"bold\",\n              textTransform: \"uppercase\",\n              textDecoration: \"underline\",\n              marginBottom: \"0.5rem\"\n            }}\n          >\n            MEMBERS:\n          </div>\n          {that.state.members.map(member => {\n            return (\n              <div style={{ margin: \"0\" }}>\n                <span\n                  className=\"collective-button\"\n                  onClick={() => this.handleNameClicked(member.targetID)}\n                >\n                  {member.target}\n                </span>\n                {member.passage.map(passage => {\n                  return this.getPassageLink(passage);\n                })}\n              </div>\n            );\n          })}\n        </div>\n      );\n    } else {\n      return null;\n    }\n  }\n\n  /*******************/\n  /* SETUP FUNCTIONS */\n  /*******************/\n\n  componentDidMount() {\n    const params = queryString.parse(this.props.location.search.slice(1));\n    const id = params.id as string;\n    if (!params.id) {\n      // Handle bad url\n      //@ts-ignore\n      this.setState({ validSearch: false });\n    } else {\n      //Substitute with ID\n      // this.updateComponent(this.state.id);\n      let newState = updateComponent(id);\n      this.setState({\n        id: newState.id,\n        relationships: newState.relationships,\n        members: newState.members,\n        name: newState.name,\n        type: newState.type,\n        validSearch: newState.validSearch\n      });\n    }\n  }\n\n  componentDidUpdate() {\n    const params = queryString.parse(this.props.location.search.slice(1));\n    const id = params.id as string;\n    if (!params.id) {\n      // Handle bad url\n      //@ts-ignore\n      this.setState({ validSearch: false });\n    } else if (this.state.id !== id) {\n      //Substitute with ID\n      // this.updateComponent(this.state.id);\n      let newState = updateComponent(id);\n      this.setState({\n        id: newState.id,\n        relationships: newState.relationships,\n        members: newState.members,\n        name: newState.name,\n        type: newState.type,\n        validSearch: newState.validSearch\n      });\n    }\n  }\n\n  /*************/\n  /* RENDERING */\n  /*************/\n\n  render() {\n    return (\n      <React.Fragment>\n        <div\n          className={this.state.validSearch ? \"no-display\" : \"\"}\n          style={{ textAlign: \"center\", padding: \"3rem\" }}\n        >\n          No profiles have been selected. Try using the Search function.\n        </div>\n        <div className={this.state.validSearch ? \"\" : \"no-display\"}>\n          <div\n            style={{\n              margin: \"1rem 6rem 3rem 6rem\",\n              padding: \"3rem\",\n              display: \"flow-root\",\n              border: \"solid 1px black\"\n            }}\n          >\n            <div id=\"datacard-heading\">{this.state.name}</div>\n            <div id=\"datacard-alternativenames\">\n              {getAlternativeNames(this.state.id)}\n            </div>\n            <div id=\"datacard-mantoID\">MANTO ID: {this.state.id}</div>\n            <div\n              id=\"datacard-alternativenames\"\n              className={\n                getGender(this.state.id) === \"undefined\" ? \"no-display\" : \"\"\n              }\n            >\n              Gender: {getGender(this.state.id)}\n            </div>\n            {/* If no data is available for the subject */}\n            <div\n              className={\n                checkNoRelations(this.state.relationships) ? \"\" : \"no-display\"\n              }\n            ></div>\n            {/* If data is available for the subject */}\n            {Object.keys(this.state.relationships).map(key => {\n              if (key === \"MOTHERS\" || key === \"FATHERS\" || key === \"SPOUSES\") {\n                return <div key={key}>{this.getDataPoints(key, true)}</div>;\n              } else {\n                return <div key={key}>{this.getDataPoints(key, false)}</div>;\n              }\n            })}\n            <div>{this.getCollectiveMembers()}</div>\n          </div>\n        </div>\n\n        <EntityGraph\n          id={this.state.id}\n          relationships={this.state.relationships}\n        ></EntityGraph>\n      </React.Fragment>\n    );\n  }\n}\n\nexport default DataCards;\n","import React from \"react\";\nimport \"./App.css\";\nimport Header from \"./Header\";\nimport Search from \"./Search\";\nimport DataCards from \"./DataCards\";\nimport ReactGA from \"react-ga\";\nimport {\n  HashRouter as Router,\n  Route,\n  Link,\n  Switch,\n  Redirect\n} from \"react-router-dom\";\n\nclass App extends React.Component<{}, {}> {\n  constructor(props: any) {\n    super(props);\n    this.state = {\n      subjectID: \"\"\n    };\n  }\n\n  changeEntity(ID: string) {\n    this.setState({ subjectID: ID });\n  }\n\n  initializeReactGA() {\n    ReactGA.initialize(\"UA-151993194-1\");\n    ReactGA.pageview(\"/homepage\");\n  }\n\n  render() {\n    return (\n      <div\n        style={{ backgroundColor: \"#eeeeee\", height: \"100%\", width: \"100%\" }}\n      >\n        <Router>\n          <Link to=\"/\">\n            <Header></Header>\n          </Link>\n          <Search></Search>\n          <Switch>\n            {/* <Route exact path=\"/\" component={Home} /> */}\n            <Route path=\"/search\" component={Search} />\n            <Route path=\"/datacards\" component={DataCards} />\n            <Route component={() => <Redirect to=\"/\" />} />\n          </Switch>\n        </Router>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}